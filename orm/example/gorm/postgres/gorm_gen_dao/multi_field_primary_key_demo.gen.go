// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_gen_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_model"
)

func newMultiFieldPrimaryKeyDemo(db *gorm.DB, opts ...gen.DOOption) multiFieldPrimaryKeyDemo {
	_multiFieldPrimaryKeyDemo := multiFieldPrimaryKeyDemo{}

	_multiFieldPrimaryKeyDemo.multiFieldPrimaryKeyDemoDo.UseDB(db, opts...)
	_multiFieldPrimaryKeyDemo.multiFieldPrimaryKeyDemoDo.UseModel(&gorm_gen_model.MultiFieldPrimaryKeyDemo{})

	tableName := _multiFieldPrimaryKeyDemo.multiFieldPrimaryKeyDemoDo.TableName()
	_multiFieldPrimaryKeyDemo.ALL = field.NewAsterisk(tableName)
	_multiFieldPrimaryKeyDemo.PrimaryKey1 = field.NewString(tableName, "primary_key_1")
	_multiFieldPrimaryKeyDemo.PrimaryKey2 = field.NewString(tableName, "primary_key_2")
	_multiFieldPrimaryKeyDemo.CreatedAt = field.NewTime(tableName, "created_at")
	_multiFieldPrimaryKeyDemo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_multiFieldPrimaryKeyDemo.DeletedAt = field.NewField(tableName, "deleted_at")

	_multiFieldPrimaryKeyDemo.fillFieldMap()

	return _multiFieldPrimaryKeyDemo
}

type multiFieldPrimaryKeyDemo struct {
	multiFieldPrimaryKeyDemoDo multiFieldPrimaryKeyDemoDo

	ALL         field.Asterisk
	PrimaryKey1 field.String
	PrimaryKey2 field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (m multiFieldPrimaryKeyDemo) Table(newTableName string) *multiFieldPrimaryKeyDemo {
	m.multiFieldPrimaryKeyDemoDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m multiFieldPrimaryKeyDemo) As(alias string) *multiFieldPrimaryKeyDemo {
	m.multiFieldPrimaryKeyDemoDo.DO = *(m.multiFieldPrimaryKeyDemoDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *multiFieldPrimaryKeyDemo) updateTableName(table string) *multiFieldPrimaryKeyDemo {
	m.ALL = field.NewAsterisk(table)
	m.PrimaryKey1 = field.NewString(table, "primary_key_1")
	m.PrimaryKey2 = field.NewString(table, "primary_key_2")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *multiFieldPrimaryKeyDemo) WithContext(ctx context.Context) *multiFieldPrimaryKeyDemoDo {
	return m.multiFieldPrimaryKeyDemoDo.WithContext(ctx)
}

func (m multiFieldPrimaryKeyDemo) TableName() string { return m.multiFieldPrimaryKeyDemoDo.TableName() }

func (m multiFieldPrimaryKeyDemo) Alias() string { return m.multiFieldPrimaryKeyDemoDo.Alias() }

func (m multiFieldPrimaryKeyDemo) Columns(cols ...field.Expr) gen.Columns {
	return m.multiFieldPrimaryKeyDemoDo.Columns(cols...)
}

func (m *multiFieldPrimaryKeyDemo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *multiFieldPrimaryKeyDemo) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["primary_key_1"] = m.PrimaryKey1
	m.fieldMap["primary_key_2"] = m.PrimaryKey2
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m multiFieldPrimaryKeyDemo) clone(db *gorm.DB) multiFieldPrimaryKeyDemo {
	m.multiFieldPrimaryKeyDemoDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m multiFieldPrimaryKeyDemo) replaceDB(db *gorm.DB) multiFieldPrimaryKeyDemo {
	m.multiFieldPrimaryKeyDemoDo.ReplaceDB(db)
	return m
}

type multiFieldPrimaryKeyDemoDo struct{ gen.DO }

func (m multiFieldPrimaryKeyDemoDo) Debug() *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Debug())
}

func (m multiFieldPrimaryKeyDemoDo) WithContext(ctx context.Context) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m multiFieldPrimaryKeyDemoDo) ReadDB() *multiFieldPrimaryKeyDemoDo {
	return m.Clauses(dbresolver.Read)
}

func (m multiFieldPrimaryKeyDemoDo) WriteDB() *multiFieldPrimaryKeyDemoDo {
	return m.Clauses(dbresolver.Write)
}

func (m multiFieldPrimaryKeyDemoDo) Session(config *gorm.Session) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Session(config))
}

func (m multiFieldPrimaryKeyDemoDo) Clauses(conds ...clause.Expression) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Returning(value interface{}, columns ...string) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m multiFieldPrimaryKeyDemoDo) Not(conds ...gen.Condition) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Or(conds ...gen.Condition) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Select(conds ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Where(conds ...gen.Condition) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Order(conds ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Distinct(cols ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m multiFieldPrimaryKeyDemoDo) Omit(cols ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m multiFieldPrimaryKeyDemoDo) Join(table schema.Tabler, on ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m multiFieldPrimaryKeyDemoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m multiFieldPrimaryKeyDemoDo) RightJoin(table schema.Tabler, on ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m multiFieldPrimaryKeyDemoDo) Group(cols ...field.Expr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m multiFieldPrimaryKeyDemoDo) Having(conds ...gen.Condition) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m multiFieldPrimaryKeyDemoDo) Limit(limit int) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m multiFieldPrimaryKeyDemoDo) Offset(offset int) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m multiFieldPrimaryKeyDemoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m multiFieldPrimaryKeyDemoDo) Unscoped() *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Unscoped())
}

func (m multiFieldPrimaryKeyDemoDo) Create(values ...*gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m multiFieldPrimaryKeyDemoDo) CreateInBatches(values []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m multiFieldPrimaryKeyDemoDo) Save(values ...*gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m multiFieldPrimaryKeyDemoDo) First() (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen_model.MultiFieldPrimaryKeyDemo), nil
	}
}

func (m multiFieldPrimaryKeyDemoDo) Take() (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen_model.MultiFieldPrimaryKeyDemo), nil
	}
}

func (m multiFieldPrimaryKeyDemoDo) Last() (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen_model.MultiFieldPrimaryKeyDemo), nil
	}
}

func (m multiFieldPrimaryKeyDemoDo) Find() ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	result, err := m.DO.Find()
	return result.([]*gorm_gen_model.MultiFieldPrimaryKeyDemo), err
}

func (m multiFieldPrimaryKeyDemoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gorm_gen_model.MultiFieldPrimaryKeyDemo, err error) {
	buf := make([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m multiFieldPrimaryKeyDemoDo) FindInBatches(result *[]*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m multiFieldPrimaryKeyDemoDo) Attrs(attrs ...field.AssignExpr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m multiFieldPrimaryKeyDemoDo) Assign(attrs ...field.AssignExpr) *multiFieldPrimaryKeyDemoDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m multiFieldPrimaryKeyDemoDo) Joins(fields ...field.RelationField) *multiFieldPrimaryKeyDemoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m multiFieldPrimaryKeyDemoDo) Preload(fields ...field.RelationField) *multiFieldPrimaryKeyDemoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m multiFieldPrimaryKeyDemoDo) FirstOrInit() (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen_model.MultiFieldPrimaryKeyDemo), nil
	}
}

func (m multiFieldPrimaryKeyDemoDo) FirstOrCreate() (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gorm_gen_model.MultiFieldPrimaryKeyDemo), nil
	}
}

func (m multiFieldPrimaryKeyDemoDo) FindByPage(offset int, limit int) (result []*gorm_gen_model.MultiFieldPrimaryKeyDemo, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m multiFieldPrimaryKeyDemoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m multiFieldPrimaryKeyDemoDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m multiFieldPrimaryKeyDemoDo) Delete(models ...*gorm_gen_model.MultiFieldPrimaryKeyDemo) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *multiFieldPrimaryKeyDemoDo) withDO(do gen.Dao) *multiFieldPrimaryKeyDemoDo {
	m.DO = *do.(*gen.DO)
	return m
}
