// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package gorm_gen_repo

import (
	"context"
	"errors"
	"reflect"
	"strings"

	"github.com/fzf-labs/godb/orm/condition"
	"github.com/fzf-labs/godb/orm/dbcache"
	"github.com/fzf-labs/godb/orm/encoding"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_dao"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_model"
	"github.com/fzf-labs/godb/orm/gen/config"
	"github.com/jinzhu/copier"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var _ IUserDemoRepo = (*UserDemoRepo)(nil)

var (
	CacheUserDemoByConditionPrefix              = "DBCache:gorm_gen:UserDemoByCondition"
	CacheUserDemoUnscopedByConditionPrefix      = "DBCache:gorm_gen:UserDemoUnscopedByCondition"
	CacheUserDemoByIDPrefix                     = "DBCache:gorm_gen:UserDemoByID"
	CacheUserDemoUnscopedByIDPrefix             = "DBCache:gorm_gen:UserDemoUnscopedByID"
	CacheUserDemoByUIDPrefix                    = "DBCache:gorm_gen:UserDemoByUID"
	CacheUserDemoUnscopedByUIDPrefix            = "DBCache:gorm_gen:UserDemoUnscopedByUID"
	CacheUserDemoByUIDStatusPrefix              = "DBCache:gorm_gen:UserDemoByUIDStatus"
	CacheUserDemoUnscopedByUIDStatusPrefix      = "DBCache:gorm_gen:UserDemoUnscopedByUIDStatus"
	CacheUserDemoByTenantIDDeptIDPrefix         = "DBCache:gorm_gen:UserDemoByTenantIDDeptID"
	CacheUserDemoUnscopedByTenantIDDeptIDPrefix = "DBCache:gorm_gen:UserDemoUnscopedByTenantIDDeptID"
	CacheUserDemoByUsernamePrefix               = "DBCache:gorm_gen:UserDemoByUsername"
	CacheUserDemoUnscopedByUsernamePrefix       = "DBCache:gorm_gen:UserDemoUnscopedByUsername"
	CacheUserDemoByTenantIDPrefix               = "DBCache:gorm_gen:UserDemoByTenantID"
	CacheUserDemoUnscopedByTenantIDPrefix       = "DBCache:gorm_gen:UserDemoUnscopedByTenantID"
)

type (
	IUserDemoRepo interface {
		// NewData 实例化
		NewData() *gorm_gen_model.UserDemo
		// DeepCopy 深拷贝
		DeepCopy(data *gorm_gen_model.UserDemo) *gorm_gen_model.UserDemo
		// CreateOne 创建一条数据
		CreateOne(ctx context.Context, data *gorm_gen_model.UserDemo) error
		// CreateOneCache 创建一条数据, 并删除缓存
		CreateOneCache(ctx context.Context, data *gorm_gen_model.UserDemo) error
		// CreateOneByTx 创建一条数据(事务)
		CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error
		// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
		CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error
		// CreateBatch 批量创建数据
		CreateBatch(ctx context.Context, data []*gorm_gen_model.UserDemo, batchSize int) error
		// CreateBatchCache 批量创建数据, 并删除缓存
		CreateBatchCache(ctx context.Context, data []*gorm_gen_model.UserDemo, batchSize int) error
		// CreateBatchByTx 批量创建数据(事务)
		CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.UserDemo, batchSize int) error
		// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
		CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.UserDemo, batchSize int) error
		// UpsertOne Upsert一条数据
		UpsertOne(ctx context.Context, data *gorm_gen_model.UserDemo) error
		// UpsertOneCache Upsert一条数据, 并删除缓存
		UpsertOneCache(ctx context.Context, data *gorm_gen_model.UserDemo) error
		// UpsertOneByTx Upsert一条数据(事务)
		UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error
		// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error
		// UpsertOneByFields 根据fields字段Upsert一条数据
		UpsertOneByFields(ctx context.Context, data *gorm_gen_model.UserDemo, fields []string) error
		// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
		UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.UserDemo, fields []string) error
		// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
		UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo, fields []string) error
		// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo, fields []string) error
		// UpdateOne 更新一条数据
		UpdateOne(ctx context.Context, newData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscoped 更新一条数据（包括软删除）
		UpdateOneUnscoped(ctx context.Context, newData *gorm_gen_model.UserDemo) error
		// UpdateOneCache 更新一条数据，并删除缓存
		UpdateOneCache(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedCache 更新一条数据，并删除缓存（包括软删除）
		UpdateOneUnscopedCache(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneByTx 更新一条数据(事务)
		UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedByTx 更新一条数据(事务)（包括软删除）
		UpdateOneUnscopedByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error
		// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
		UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedCacheByTx 更新一条数据(事务)，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedWithZero 更新一条数据,包含零值（包括软删除）
		UpdateOneUnscopedWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedCacheWithZero 更新一条数据,包含零值，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedWithZeroByTx 更新一条数据(事务),包含零值（包括软删除）
		UpdateOneUnscopedWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateOneUnscopedCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error
		// UpdateBatchByID 根据字段ID批量更新,零值会被更新
		UpdateBatchByID(ctx context.Context, ID string, data map[string]interface{}) error
		// UpdateBatchUnscopedByID 根据字段ID批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByID(ctx context.Context, ID string, data map[string]interface{}) error
		// UpdateBatchByIDTx 根据主键ID批量更新(事务),零值会被更新
		UpdateBatchByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error
		// UpdateBatchUnscopedByIDTx 根据主键ID批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error
		// UpdateBatchByIDS 根据字段IDS批量更新,零值会被更新
		UpdateBatchByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByIDS 根据字段IDS批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error
		// UpdateBatchByIDSTx 根据字段IDS批量更新(事务),零值会被更新
		UpdateBatchByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByIDSTx 根据字段IDS批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error
		// UpdateBatchByUID 根据字段UID批量更新,零值会被更新
		UpdateBatchByUID(ctx context.Context, UID string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUID 根据字段UID批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByUID(ctx context.Context, UID string, data map[string]interface{}) error
		// UpdateBatchByUIDTx 根据主键UID批量更新(事务),零值会被更新
		UpdateBatchByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUIDTx 根据主键UID批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, data map[string]interface{}) error
		// UpdateBatchByUIDS 根据字段UIDS批量更新,零值会被更新
		UpdateBatchByUIDS(ctx context.Context, UIDS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUIDS 根据字段UIDS批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByUIDS(ctx context.Context, UIDS []string, data map[string]interface{}) error
		// UpdateBatchByUIDSTx 根据字段UIDS批量更新(事务),零值会被更新
		UpdateBatchByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUIDSTx 根据字段UIDS批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string, data map[string]interface{}) error
		// UpdateBatchByUIDStatus 根据字段UIDStatus批量更新,零值会被更新
		UpdateBatchByUIDStatus(ctx context.Context, UID string, status int16, data map[string]interface{}) error
		// UpdateBatchUnscopedByUIDStatus 根据字段UIDStatus批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByUIDStatus(ctx context.Context, UID string, status int16, data map[string]interface{}) error
		// UpdateBatchByUIDStatusTx 根据主键UIDStatus批量更新(事务),零值会被更新
		UpdateBatchByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16, data map[string]interface{}) error
		// UpdateBatchUnscopedByUIDStatusTx 根据主键UIDStatus批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16, data map[string]interface{}) error
		// UpdateBatchByTenantIDDeptID 根据字段TenantIDDeptID批量更新,零值会被更新
		UpdateBatchByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64, data map[string]interface{}) error
		// UpdateBatchUnscopedByTenantIDDeptID 根据字段TenantIDDeptID批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64, data map[string]interface{}) error
		// UpdateBatchByTenantIDDeptIDTx 根据主键TenantIDDeptID批量更新(事务),零值会被更新
		UpdateBatchByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64, data map[string]interface{}) error
		// UpdateBatchUnscopedByTenantIDDeptIDTx 根据主键TenantIDDeptID批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64, data map[string]interface{}) error
		// UpdateBatchByUsername 根据字段Username批量更新,零值会被更新
		UpdateBatchByUsername(ctx context.Context, username string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUsername 根据字段Username批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByUsername(ctx context.Context, username string, data map[string]interface{}) error
		// UpdateBatchByUsernameTx 根据主键Username批量更新(事务),零值会被更新
		UpdateBatchByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUsernameTx 根据主键Username批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string, data map[string]interface{}) error
		// UpdateBatchByUsernames 根据字段Usernames批量更新,零值会被更新
		UpdateBatchByUsernames(ctx context.Context, usernames []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUsernames 根据字段Usernames批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByUsernames(ctx context.Context, usernames []string, data map[string]interface{}) error
		// UpdateBatchByUsernamesTx 根据字段Usernames批量更新(事务),零值会被更新
		UpdateBatchByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByUsernamesTx 根据字段Usernames批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string, data map[string]interface{}) error
		// UpdateBatchByTenantID 根据字段TenantID批量更新,零值会被更新
		UpdateBatchByTenantID(ctx context.Context, tenantID int64, data map[string]interface{}) error
		// UpdateBatchUnscopedByTenantID 根据字段TenantID批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByTenantID(ctx context.Context, tenantID int64, data map[string]interface{}) error
		// UpdateBatchByTenantIDTx 根据主键TenantID批量更新(事务),零值会被更新
		UpdateBatchByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, data map[string]interface{}) error
		// UpdateBatchUnscopedByTenantIDTx 根据主键TenantID批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, data map[string]interface{}) error
		// UpdateBatchByTenantIDS 根据字段TenantIDS批量更新,零值会被更新
		UpdateBatchByTenantIDS(ctx context.Context, tenantIDS []int64, data map[string]interface{}) error
		// UpdateBatchUnscopedByTenantIDS 根据字段TenantIDS批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByTenantIDS(ctx context.Context, tenantIDS []int64, data map[string]interface{}) error
		// UpdateBatchByTenantIDSTx 根据字段TenantIDS批量更新(事务),零值会被更新
		UpdateBatchByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64, data map[string]interface{}) error
		// UpdateBatchUnscopedByTenantIDSTx 根据字段TenantIDS批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64, data map[string]interface{}) error
		// FindOneByID 根据ID查询一条数据
		FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error)
		// FindOneUnscopedByID 根据ID查询一条数据（包括软删除）
		FindOneUnscopedByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error)
		// FindOneCacheByID 根据ID查询一条数据，并设置缓存
		FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error)
		// FindOneUnscopedCacheByID 根据ID查询一条数据（包括软删除），并设置缓存
		FindOneUnscopedCacheByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error)
		// FindMultiByIDS 根据IDS查询多条数据
		FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByIDS 根据IDS查询多条数据（包括软删除）
		FindMultiUnscopedByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByIDS 根据IDS查询多条数据，并设置缓存
		FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByIDS 根据IDS查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindOneByUID 根据UID查询一条数据
		FindOneByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error)
		// FindOneUnscopedByUID 根据UID查询一条数据（包括软删除）
		FindOneUnscopedByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error)
		// FindOneCacheByUID 根据UID查询一条数据，并设置缓存
		FindOneCacheByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error)
		// FindOneUnscopedCacheByUID 根据UID查询一条数据（包括软删除），并设置缓存
		FindOneUnscopedCacheByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error)
		// FindMultiByUIDS 根据UIDS查询多条数据
		FindMultiByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByUIDS 根据UIDS查询多条数据（包括软删除）
		FindMultiUnscopedByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByUIDS 根据UIDS查询多条数据，并设置缓存
		FindMultiCacheByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByUIDS 根据UIDS查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error)
		// FindOneByUIDStatus 根据UIDStatus查询一条数据
		FindOneByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error)
		// FindOneUnscopedByUIDStatus 根据UIDStatus查询一条数据（包括软删除）
		FindOneUnscopedByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error)
		// FindOneCacheByUIDStatus 根据UIDStatus查询一条数据，并设置缓存
		FindOneCacheByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error)
		// FindOneUnscopedCacheByUIDStatus 根据UIDStatus查询一条数据（包括软删除），并设置缓存
		FindOneUnscopedCacheByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error)
		// FindMultiByTenantIDDeptID 根据TenantIDDeptID查询多条数据，并设置缓存
		FindMultiByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByTenantIDDeptID 根据TenantIDDeptID查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByTenantIDDeptID 根据TenantIDDeptID查询多条数据，并设置缓存
		FindMultiCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByTenantIDDeptID 根据TenantIDDeptID查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiByUsername 根据username查询多条数据
		FindMultiByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByUsername 根据username查询多条数据（包括软删除）
		FindMultiUnscopedByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByUsername 根据username查询多条数据并设置缓存
		FindMultiCacheByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByUsername 根据username查询多条数据（包括软删除）并设置缓存
		FindMultiUnscopedCacheByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiByUsernames 根据usernames查询多条数据
		FindMultiByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByUsernames 根据usernames查询多条数据（包括软删除）
		FindMultiUnscopedByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByUsernames 根据usernames查询多条数据，并设置缓存
		FindMultiCacheByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByUsernames 根据usernames查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiByTenantID 根据tenantID查询多条数据
		FindMultiByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByTenantID 根据tenantID查询多条数据（包括软删除）
		FindMultiUnscopedByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByTenantID 根据tenantID查询多条数据并设置缓存
		FindMultiCacheByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByTenantID 根据tenantID查询多条数据（包括软删除）并设置缓存
		FindMultiUnscopedCacheByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiByTenantIDS 根据tenantIDS查询多条数据
		FindMultiByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedByTenantIDS 根据tenantIDS查询多条数据（包括软删除）
		FindMultiUnscopedByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiCacheByTenantIDS 根据tenantIDS查询多条数据，并设置缓存
		FindMultiCacheByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiUnscopedCacheByTenantIDS 根据tenantIDS查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error)
		// FindMultiByCondition 自定义查询数据(通用)
		FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error)
		// FindMultiUnscopedByCondition 自定义查询数据(通用)（包括软删除）
		FindMultiUnscopedByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error)
		// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
		FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error)
		// FindMultiUnscopedCacheByCondition 自定义查询数据(通用)（包括软删除）,并设置缓存
		FindMultiUnscopedCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error)
		// DeleteOneByID 根据ID删除一条数据
		DeleteOneByID(ctx context.Context, ID string) error
		// DeleteOneUnscopedByID 根据ID删除一条数据
		DeleteOneUnscopedByID(ctx context.Context, ID string) error
		// DeleteOneCacheByID 根据ID删除一条数据，并删除缓存
		DeleteOneCacheByID(ctx context.Context, ID string) error
		// DeleteOneUnscopedCacheByID 根据ID删除一条数据，并删除缓存
		DeleteOneUnscopedCacheByID(ctx context.Context, ID string) error
		// DeleteOneByIDTx 根据ID删除一条数据(事务)
		DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneUnscopedByIDTx 根据ID删除一条数据(事务)
		DeleteOneUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneCacheByIDTx 根据ID删除一条数据，并删除缓存(事务)
		DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneUnscopedCacheByIDTx 根据ID删除一条数据，并删除缓存(事务)
		DeleteOneUnscopedCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteMultiByIDS 根据IDS删除多条数据
		DeleteMultiByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiUnscopedByIDS 根据IDS删除多条数据
		DeleteMultiUnscopedByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiCacheByIDS 根据IDS删除多条数据，并删除缓存
		DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiUnscopedCacheByIDS 根据IDS删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiByIDSTx 根据IDS删除多条数据(事务)
		DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiUnscopedByIDSTx 根据IDS删除多条数据(事务)
		DeleteMultiUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiCacheByIDSTx 根据IDS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiUnscopedCacheByIDSTx 根据IDS删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteOneByUID 根据UID删除一条数据
		DeleteOneByUID(ctx context.Context, UID string) error
		// DeleteOneUnscopedByUID 根据UID删除一条数据
		DeleteOneUnscopedByUID(ctx context.Context, UID string) error
		// DeleteOneCacheByUID 根据UID删除一条数据，并删除缓存
		DeleteOneCacheByUID(ctx context.Context, UID string) error
		// DeleteOneUnscopedCacheByUID 根据UID删除一条数据，并删除缓存
		DeleteOneUnscopedCacheByUID(ctx context.Context, UID string) error
		// DeleteOneByUIDTx 根据UID删除一条数据(事务)
		DeleteOneByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error
		// DeleteOneUnscopedByUIDTx 根据UID删除一条数据(事务)
		DeleteOneUnscopedByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error
		// DeleteOneCacheByUIDTx 根据UID删除一条数据，并删除缓存(事务)
		DeleteOneCacheByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error
		// DeleteOneUnscopedCacheByUIDTx 根据UID删除一条数据，并删除缓存(事务)
		DeleteOneUnscopedCacheByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error
		// DeleteMultiByUIDS 根据UIDS删除多条数据
		DeleteMultiByUIDS(ctx context.Context, UIDS []string) error
		// DeleteMultiUnscopedByUIDS 根据UIDS删除多条数据
		DeleteMultiUnscopedByUIDS(ctx context.Context, UIDS []string) error
		// DeleteMultiCacheByUIDS 根据UIDS删除多条数据，并删除缓存
		DeleteMultiCacheByUIDS(ctx context.Context, UIDS []string) error
		// DeleteMultiUnscopedCacheByUIDS 根据UIDS删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByUIDS(ctx context.Context, UIDS []string) error
		// DeleteMultiByUIDSTx 根据UIDS删除多条数据(事务)
		DeleteMultiByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error
		// DeleteMultiUnscopedByUIDSTx 根据UIDS删除多条数据(事务)
		DeleteMultiUnscopedByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error
		// DeleteMultiCacheByUIDSTx 根据UIDS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error
		// DeleteMultiUnscopedCacheByUIDSTx 根据UIDS删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error
		// DeleteOneByUIDStatus 根据UIDStatus删除一条数据
		DeleteOneByUIDStatus(ctx context.Context, UID string, status int16) error
		// DeleteOneUnscopedByUIDStatus 根据UIDStatus删除一条数据
		DeleteOneUnscopedByUIDStatus(ctx context.Context, UID string, status int16) error
		// DeleteOneCacheByUIDStatus 根据UIDStatus删除一条数据，并删除缓存
		DeleteOneCacheByUIDStatus(ctx context.Context, UID string, status int16) error
		// DeleteOneUnscopedCacheByUIDStatus 根据UIDStatus删除一条数据，并删除缓存
		DeleteOneUnscopedCacheByUIDStatus(ctx context.Context, UID string, status int16) error
		// DeleteOneByUIDStatusTx 根据UIDStatus删除一条数据(事务)
		DeleteOneByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error
		// DeleteOneUnscopedByUIDStatusTx 根据UIDStatus删除一条数据(事务)
		DeleteOneUnscopedByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error
		// DeleteOneCacheByUIDStatusTx 根据UIDStatus删除一条数据，并删除缓存(事务)
		DeleteOneCacheByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error
		// DeleteOneUnscopedCacheByUIDStatusTx 根据UIDStatus删除一条数据，并删除缓存(事务)
		DeleteOneUnscopedCacheByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error
		// DeleteMultiByTenantIDDeptID 根据tenantID删除多条数据
		DeleteMultiByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error
		// DeleteMultiUnscopedByTenantIDDeptID 根据tenantID删除多条数据
		DeleteMultiUnscopedByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error
		// DeleteMultiCacheByTenantIDDeptID 根据tenantID删除多条数据，并删除缓存
		DeleteMultiCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error
		// DeleteMultiUnscopedCacheByTenantIDDeptID 根据tenantID删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error
		// DeleteMultiByTenantIDDeptIDTx 根据tenantID删除多条数据(事务)
		DeleteMultiByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error
		// DeleteMultiUnscopedByTenantIDDeptIDTx 根据tenantID删除多条数据(事务)
		DeleteMultiUnscopedByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error
		// DeleteMultiCacheByTenantIDDeptIDTx 根据tenantID删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error
		// DeleteMultiUnscopedCacheByTenantIDDeptIDTx 根据tenantID删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error
		// DeleteMultiByUsername 根据Username删除多条数据
		DeleteMultiByUsername(ctx context.Context, username string) error
		// DeleteMultiUnscopedByUsername 根据Username删除多条数据
		DeleteMultiUnscopedByUsername(ctx context.Context, username string) error
		// DeleteMultiCacheByUsername 根据username删除多条数据，并删除缓存
		DeleteMultiCacheByUsername(ctx context.Context, username string) error
		// DeleteMultiUnscopedCacheByUsername 根据username删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByUsername(ctx context.Context, username string) error
		// DeleteMultiByUsernameTx 根据username删除多条数据
		DeleteMultiByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error
		// DeleteMultiUnscopedByUsernameTx 根据username删除多条数据
		DeleteMultiUnscopedByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error
		// DeleteMultiCacheByUsernameTx 根据username删除多条数据，并删除缓存
		DeleteMultiCacheByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error
		// DeleteMultiUnscopedCacheByUsernameTx 根据username删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error
		// DeleteMultiByUsernames 根据Usernames删除多条数据
		DeleteMultiByUsernames(ctx context.Context, usernames []string) error
		// DeleteMultiUnscopedByUsernames 根据Usernames删除多条数据
		DeleteMultiUnscopedByUsernames(ctx context.Context, usernames []string) error
		// DeleteMultiCacheByUsernames 根据Usernames删除多条数据，并删除缓存
		DeleteMultiCacheByUsernames(ctx context.Context, usernames []string) error
		// DeleteMultiUnscopedCacheByUsernames 根据Usernames删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByUsernames(ctx context.Context, usernames []string) error
		// DeleteMultiByUsernamesTx 根据Usernames删除多条数据(事务)
		DeleteMultiByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error
		// DeleteMultiUnscopedByUsernamesTx 根据Usernames删除多条数据(事务)
		DeleteMultiUnscopedByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error
		// DeleteMultiCacheByUsernamesTx 根据Usernames删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error
		// DeleteMultiUnscopedCacheByUsernamesTx 根据Usernames删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error
		// DeleteMultiByTenantID 根据TenantID删除多条数据
		DeleteMultiByTenantID(ctx context.Context, tenantID int64) error
		// DeleteMultiUnscopedByTenantID 根据TenantID删除多条数据
		DeleteMultiUnscopedByTenantID(ctx context.Context, tenantID int64) error
		// DeleteMultiCacheByTenantID 根据tenantID删除多条数据，并删除缓存
		DeleteMultiCacheByTenantID(ctx context.Context, tenantID int64) error
		// DeleteMultiUnscopedCacheByTenantID 根据tenantID删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByTenantID(ctx context.Context, tenantID int64) error
		// DeleteMultiByTenantIDTx 根据tenantID删除多条数据
		DeleteMultiByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error
		// DeleteMultiUnscopedByTenantIDTx 根据tenantID删除多条数据
		DeleteMultiUnscopedByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error
		// DeleteMultiCacheByTenantIDTx 根据tenantID删除多条数据，并删除缓存
		DeleteMultiCacheByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error
		// DeleteMultiUnscopedCacheByTenantIDTx 根据tenantID删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error
		// DeleteMultiByTenantIDS 根据TenantIDS删除多条数据
		DeleteMultiByTenantIDS(ctx context.Context, tenantIDS []int64) error
		// DeleteMultiUnscopedByTenantIDS 根据TenantIDS删除多条数据
		DeleteMultiUnscopedByTenantIDS(ctx context.Context, tenantIDS []int64) error
		// DeleteMultiCacheByTenantIDS 根据TenantIDS删除多条数据，并删除缓存
		DeleteMultiCacheByTenantIDS(ctx context.Context, tenantIDS []int64) error
		// DeleteMultiUnscopedCacheByTenantIDS 根据TenantIDS删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByTenantIDS(ctx context.Context, tenantIDS []int64) error
		// DeleteMultiByTenantIDSTx 根据TenantIDS删除多条数据(事务)
		DeleteMultiByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error
		// DeleteMultiUnscopedByTenantIDSTx 根据TenantIDS删除多条数据(事务)
		DeleteMultiUnscopedByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error
		// DeleteMultiCacheByTenantIDSTx 根据TenantIDS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error
		// DeleteMultiUnscopedCacheByTenantIDSTx 根据TenantIDS删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error
		// DeleteIndexCache 删除索引存在的缓存
		DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.UserDemo) error
	}
	UserDemoRepo struct {
		db       *gorm.DB
		cache    dbcache.IDBCache
		encoding encoding.API
	}
)

func NewUserDemoRepo(cfg *config.Repo) *UserDemoRepo {
	return &UserDemoRepo{
		db:       cfg.DB,
		cache:    cfg.Cache,
		encoding: cfg.Encoding,
	}
}

// NewData 实例化
func (u *UserDemoRepo) NewData() *gorm_gen_model.UserDemo {
	return &gorm_gen_model.UserDemo{}
}

// DeepCopy 深拷贝
func (u *UserDemoRepo) DeepCopy(data *gorm_gen_model.UserDemo) *gorm_gen_model.UserDemo {
	newData := new(gorm_gen_model.UserDemo)
	_ = copier.CopyWithOption(newData, data, copier.Option{DeepCopy: true})
	return newData
}

// CreateOne 创建一条数据
func (u *UserDemoRepo) CreateOne(ctx context.Context, data *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCache 创建一条数据, 并删除缓存
func (u *UserDemoRepo) CreateOneCache(ctx context.Context, data *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneByTx 创建一条数据(事务)
func (u *UserDemoRepo) CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
func (u *UserDemoRepo) CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatch 批量创建数据
func (u *UserDemoRepo) CreateBatch(ctx context.Context, data []*gorm_gen_model.UserDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCache 批量创建数据, 并删除缓存
func (u *UserDemoRepo) CreateBatchCache(ctx context.Context, data []*gorm_gen_model.UserDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchByTx 批量创建数据(事务)
func (u *UserDemoRepo) CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.UserDemo, batchSize int) error {
	dao := tx.UserDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
func (u *UserDemoRepo) CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.UserDemo, batchSize int) error {
	dao := tx.UserDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOne Upsert一条数据
// Update all columns, except primary keys, to new value on conflict
func (u *UserDemoRepo) UpsertOne(ctx context.Context, data *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCache Upsert一条数据, 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (u *UserDemoRepo) UpsertOneCache(ctx context.Context, data *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	oldData, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Unscoped().First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByTx Upsert一条数据(事务)
// Update all columns, except primary keys, to new value on conflict
func (u *UserDemoRepo) UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (u *UserDemoRepo) UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	oldData, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Unscoped().First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFields 根据fields字段Upsert一条数据
func (u *UserDemoRepo) UpsertOneByFields(ctx context.Context, data *gorm_gen_model.UserDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
func (u *UserDemoRepo) UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.UserDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.UserDemo{}
	err := u.db.Model(&gorm_gen_model.UserDemo{}).Clauses(whereExpressions...).Unscoped().First(oldData).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	dao := gorm_gen_dao.Use(u.db).UserDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
func (u *UserDemoRepo) UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := tx.UserDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
func (u *UserDemoRepo) UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.UserDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.UserDemo{}
	err := u.db.Model(&gorm_gen_model.UserDemo{}).Clauses(whereExpressions...).Unscoped().First(oldData).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	dao := tx.UserDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOne 更新一条数据
// data 中主键字段必须有值，零值不会被更新
func (u *UserDemoRepo) UpdateOne(ctx context.Context, newData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscoped 更新一条数据（包括软删除）
// data 中主键字段必须有值，零值不会被更新
func (u *UserDemoRepo) UpdateOneUnscoped(ctx context.Context, newData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCache 更新一条数据，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneCache(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCache 更新一条数据，并删除缓存（包括软删除）
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneUnscopedCache(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneByTx 更新一条数据(事务)
// data 中主键字段必须有值，零值不会被更新
func (u *UserDemoRepo) UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedByTx 更新一条数据(事务)（包括软删除）
// data 中主键字段必须有值，零值不会被更新
func (u *UserDemoRepo) UpdateOneUnscopedByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheByTx 更新一条数据(事务)，并删除缓存（包括软删除）
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneUnscopedCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZero 更新一条数据,包含零值
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (u *UserDemoRepo) UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedWithZero 更新一条数据,包含零值（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (u *UserDemoRepo) UpdateOneUnscopedWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheWithZero 更新一条数据,包含零值，并删除缓存（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneUnscopedCacheWithZero(ctx context.Context, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZeroByTx 更新一条数据(事务),包含零值，
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (u *UserDemoRepo) UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedWithZeroByTx 更新一条数据(事务),包含零值（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (u *UserDemoRepo) UpdateOneUnscopedWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (u *UserDemoRepo) UpdateOneUnscopedCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.UserDemo, oldData *gorm_gen_model.UserDemo) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByID 根据字段ID批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByID(ctx context.Context, ID string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByID 根据字段ID批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByID(ctx context.Context, ID string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDTx 根据字段ID批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByIDTx 根据字段ID批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDS 根据字段IDS批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByIDS 根据字段IDS批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDSTx 根据字段IDS批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByIDSTx 根据字段IDS批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUID 根据字段UID批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByUID(ctx context.Context, UID string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUID 根据字段UID批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUID(ctx context.Context, UID string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUIDTx 根据字段UID批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUIDTx 根据字段UID批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUIDS 根据字段UIDS批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByUIDS(ctx context.Context, UIDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUIDS 根据字段UIDS批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUIDS(ctx context.Context, UIDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUIDSTx 根据字段UIDS批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUIDSTx 根据字段UIDS批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUIDStatus 根据字段UIDStatus批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByUIDStatus(ctx context.Context, UID string, status int16, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUIDStatus 根据字段UIDStatus批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUIDStatus(ctx context.Context, UID string, status int16, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUIDStatusTx 根据字段UIDStatus批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUIDStatusTx 根据字段UIDStatus批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByTenantIDDeptID 根据字段TenantIDDeptID批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByTenantIDDeptID 根据字段TenantIDDeptID批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByTenantIDDeptIDTx 根据字段TenantIDDeptID批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByTenantIDDeptIDTx 根据字段TenantIDDeptID批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUsername 根据字段Username批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByUsername(ctx context.Context, username string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUsername 根据字段Username批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUsername(ctx context.Context, username string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUsernameTx 根据字段Username批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUsernameTx 根据字段Username批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUsernames 根据字段Usernames批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByUsernames(ctx context.Context, usernames []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUsernames 根据字段Usernames批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUsernames(ctx context.Context, usernames []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByUsernamesTx 根据字段Usernames批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByUsernamesTx 根据字段Usernames批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByTenantID 根据字段TenantID批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByTenantID(ctx context.Context, tenantID int64, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByTenantID 根据字段TenantID批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByTenantID(ctx context.Context, tenantID int64, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByTenantIDTx 根据字段TenantID批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByTenantIDTx 根据字段TenantID批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByTenantIDS 根据字段TenantIDS批量更新,零值会被更新
func (u *UserDemoRepo) UpdateBatchByTenantIDS(ctx context.Context, tenantIDS []int64, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByTenantIDS 根据字段TenantIDS批量更新,零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByTenantIDS(ctx context.Context, tenantIDS []int64, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByTenantIDSTx 根据字段TenantIDS批量更新(事务),零值会被更新
func (u *UserDemoRepo) UpdateBatchByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByTenantIDSTx 根据字段TenantIDS批量更新(事务),零值会被更新（包括软删除）
func (u *UserDemoRepo) UpdateBatchUnscopedByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64, data map[string]interface{}) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// FindOneByID 根据ID查询一条数据
func (u *UserDemoRepo) FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneUnscopedByID 根据ID查询一条数据（包括软删除）
func (u *UserDemoRepo) FindOneUnscopedByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByID 根据ID查询一条数据，并设置缓存
func (u *UserDemoRepo) FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error) {
	resp := new(gorm_gen_model.UserDemo)
	cacheKey := u.cache.Key(CacheUserDemoByIDPrefix, ID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneUnscopedCacheByID 根据ID查询一条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindOneUnscopedCacheByID(ctx context.Context, ID string) (*gorm_gen_model.UserDemo, error) {
	resp := new(gorm_gen_model.UserDemo)
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByIDPrefix, ID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByIDS 根据IDS查询多条数据
func (u *UserDemoRepo) FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByIDS 根据IDS查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByIDS 根据IDS查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range IDS {
		cacheKey := u.cache.Key(CacheUserDemoByIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := u.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[u.cache.Key(CacheUserDemoByIDPrefix, v.ID)] = string(marshal)
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.UserDemo)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByIDS 根据IDS查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range IDS {
		cacheKey := u.cache.Key(CacheUserDemoUnscopedByIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := u.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[u.cache.Key(CacheUserDemoUnscopedByIDPrefix, v.ID)] = string(marshal)
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.UserDemo)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindOneByUID 根据UID查询一条数据
func (u *UserDemoRepo) FindOneByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneUnscopedByUID 根据UID查询一条数据（包括软删除）
func (u *UserDemoRepo) FindOneUnscopedByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByUID 根据UID查询一条数据，并设置缓存
func (u *UserDemoRepo) FindOneCacheByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error) {
	resp := new(gorm_gen_model.UserDemo)
	cacheKey := u.cache.Key(CacheUserDemoByUIDPrefix, UID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneUnscopedCacheByUID 根据UID查询一条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindOneUnscopedCacheByUID(ctx context.Context, UID string) (*gorm_gen_model.UserDemo, error) {
	resp := new(gorm_gen_model.UserDemo)
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByUIDPrefix, UID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByUIDS 根据UIDS查询多条数据
func (u *UserDemoRepo) FindMultiByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByUIDS 根据UIDS查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByUIDS 根据UIDS查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range UIDS {
		cacheKey := u.cache.Key(CacheUserDemoByUIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.UID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := u.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[u.cache.Key(CacheUserDemoByUIDPrefix, v.UID)] = string(marshal)
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.UserDemo)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByUIDS 根据UIDS查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByUIDS(ctx context.Context, UIDS []string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range UIDS {
		cacheKey := u.cache.Key(CacheUserDemoUnscopedByUIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := u.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[u.cache.Key(CacheUserDemoUnscopedByUIDPrefix, v.UID)] = string(marshal)
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.UserDemo)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindOneByUIDStatus 根据UIDStatus查询一条数据
func (u *UserDemoRepo) FindOneByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneUnscopedByUIDStatus 根据UIDStatus查询一条数据（包括软删除）
func (u *UserDemoRepo) FindOneUnscopedByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByUIDStatus 根据UIDStatus查询一条数据，并设置缓存
func (u *UserDemoRepo) FindOneCacheByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error) {
	resp := new(gorm_gen_model.UserDemo)
	cacheKey := u.cache.Key(CacheUserDemoByUIDStatusPrefix, UID, status)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneUnscopedCacheByUIDStatus 根据UIDStatus查询一条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindOneUnscopedCacheByUIDStatus(ctx context.Context, UID string, status int16) (*gorm_gen_model.UserDemo, error) {
	resp := new(gorm_gen_model.UserDemo)
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByUIDStatusPrefix, UID, status)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByTenantIDDeptID 根据TenantIDDeptID查询多条数据
func (u *UserDemoRepo) FindMultiByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByTenantIDDeptID 根据TenantIDDeptID查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByTenantIDDeptID 根据TenantIDDeptID查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKey := u.cache.Key(CacheUserDemoByTenantIDDeptIDPrefix, tenantID, deptID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByTenantIDDeptID 根据TenantIDDeptID查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByTenantIDDeptIDPrefix, tenantID, deptID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByUsername 根据username查询多条数据
func (u *UserDemoRepo) FindMultiByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByUsername 根据username查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByUsername 根据username查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKey := u.cache.Key(CacheUserDemoByUsernamePrefix, username)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByUsername 根据username查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByUsername(ctx context.Context, username string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByUsernamePrefix, username)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByUsernames 根据usernames查询多条数据
func (u *UserDemoRepo) FindMultiByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByUsernames 根据usernames查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByUsernames 根据usernames查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range usernames {
		cacheKey := u.cache.Key(CacheUserDemoByUsernamePrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.Username.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.UserDemo)
		for _, v := range result {
			key := u.cache.Key(CacheUserDemoByUsernamePrefix, v.Username)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.UserDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := u.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.UserDemo, 0)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByUsernames 根据usernames查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByUsernames(ctx context.Context, usernames []string) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range usernames {
		cacheKey := u.cache.Key(CacheUserDemoUnscopedByUsernamePrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.UserDemo)
		for _, v := range result {
			key := u.cache.Key(CacheUserDemoUnscopedByUsernamePrefix, v.Username)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.UserDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := u.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.UserDemo, 0)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByTenantID 根据tenantID查询多条数据
func (u *UserDemoRepo) FindMultiByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByTenantID 根据tenantID查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByTenantID 根据tenantID查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKey := u.cache.Key(CacheUserDemoByTenantIDPrefix, tenantID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByTenantID 根据tenantID查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByTenantID(ctx context.Context, tenantID int64) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByTenantIDPrefix, tenantID)
	cacheValue, err := u.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := u.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByTenantIDS 根据tenantIDS查询多条数据
func (u *UserDemoRepo) FindMultiByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByTenantIDS 根据tenantIDS查询多条数据（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error) {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByTenantIDS 根据tenantIDS查询多条数据，并设置缓存
func (u *UserDemoRepo) FindMultiCacheByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]int64)
	for _, v := range tenantIDS {
		cacheKey := u.cache.Key(CacheUserDemoByTenantIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]int64, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Where(dao.TenantID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.UserDemo)
		for _, v := range result {
			key := u.cache.Key(CacheUserDemoByTenantIDPrefix, v.TenantID)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.UserDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := u.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.UserDemo, 0)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByTenantIDS 根据tenantIDS查询多条数据（包括软删除），并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByTenantIDS(ctx context.Context, tenantIDS []int64) ([]*gorm_gen_model.UserDemo, error) {
	resp := make([]*gorm_gen_model.UserDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]int64)
	for _, v := range tenantIDS {
		cacheKey := u.cache.Key(CacheUserDemoUnscopedByTenantIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := u.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]int64, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(u.db).UserDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.UserDemo)
		for _, v := range result {
			key := u.cache.Key(CacheUserDemoUnscopedByTenantIDPrefix, v.TenantID)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.UserDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := u.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, u.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.UserDemo, 0)
			err := u.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByCondition 自定义查询数据(通用)
func (u *UserDemoRepo) FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.UserDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.UserDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = u.db.WithContext(ctx).Model(&gorm_gen_model.UserDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := u.db.WithContext(ctx).Model(&gorm_gen_model.UserDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiUnscopedByCondition 自定义查询数据(通用)（包括软删除）
func (u *UserDemoRepo) FindMultiUnscopedByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.UserDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.UserDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = u.db.WithContext(ctx).Model(&gorm_gen_model.UserDemo{}).Unscoped().Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := u.db.WithContext(ctx).Model(&gorm_gen_model.UserDemo{}).Unscoped().Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
func (u *UserDemoRepo) FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.UserDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.UserDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := u.cache.Key(CacheUserDemoByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := u.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := u.FindMultiByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := u.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// FindMultiUnscopedCacheByCondition 自定义查询数据(通用)（包括软删除）,并设置缓存
func (u *UserDemoRepo) FindMultiUnscopedCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.UserDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.UserDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.UserDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := u.cache.Key(CacheUserDemoUnscopedByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := u.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := u.FindMultiUnscopedByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := u.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, u.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = u.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// DeleteOneByID 根据ID删除一条数据
func (u *UserDemoRepo) DeleteOneByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByID 根据ID删除一条数据
func (u *UserDemoRepo) DeleteOneUnscopedByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByID 根据ID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneCacheByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByID 根据ID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneUnscopedCacheByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByIDTx 根据ID删除一条数据
func (u *UserDemoRepo) DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByIDTx 根据ID删除一条数据
func (u *UserDemoRepo) DeleteOneUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByIDTx 根据ID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByIDTx 根据ID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneUnscopedCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDS 根据IDS删除多条数据
func (u *UserDemoRepo) DeleteMultiByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByIDS 根据IDS删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDS 根据IDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByIDS 根据IDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDSTx 根据IDS删除多条数据
func (u *UserDemoRepo) DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByIDSTx 根据IDS删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDSTx 根据IDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByIDSTx 根据IDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByUID 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneByUID(ctx context.Context, UID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByUID 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneUnscopedByUID(ctx context.Context, UID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByUID 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneCacheByUID(ctx context.Context, UID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByUID 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneUnscopedCacheByUID(ctx context.Context, UID string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByUIDTx 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByUIDTx 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneUnscopedByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByUIDTx 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneCacheByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByUIDTx 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneUnscopedCacheByUIDTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByUIDS 根据UIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiByUIDS(ctx context.Context, UIDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByUIDS 根据UIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByUIDS(ctx context.Context, UIDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUIDS 根据UIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByUIDS(ctx context.Context, UIDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByUIDS 根据UIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByUIDS(ctx context.Context, UIDS []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByUIDSTx 根据UIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByUIDSTx 根据UIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUIDSTx 根据UIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByUIDSTx 根据UIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByUIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, UIDS []string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.UID.In(UIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByUIDStatus 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneByUIDStatus(ctx context.Context, UID string, status int16) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByUIDStatus 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneUnscopedByUIDStatus(ctx context.Context, UID string, status int16) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByUIDStatus 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneCacheByUIDStatus(ctx context.Context, UID string, status int16) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByUIDStatus 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneUnscopedCacheByUIDStatus(ctx context.Context, UID string, status int16) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByUIDStatusTx 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByUIDStatusTx 根据UID删除一条数据
func (u *UserDemoRepo) DeleteOneUnscopedByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByUIDStatusTx 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneCacheByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByUIDStatusTx 根据UID删除一条数据，并删除缓存
func (u *UserDemoRepo) DeleteOneUnscopedCacheByUIDStatusTx(ctx context.Context, tx *gorm_gen_dao.Query, UID string, status int16) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.UID.Eq(UID), dao.Status.Eq(status)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByTenantIDDeptID 根据tenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByTenantIDDeptID 根据tenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByTenantIDDeptID 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByTenantIDDeptID 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByTenantIDDeptID(ctx context.Context, tenantID int64, deptID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByTenantIDDeptIDTx 根据tenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByTenantIDDeptIDTx 根据tenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByTenantIDDeptIDTx 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByTenantIDDeptIDTx 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByTenantIDDeptIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64, deptID int64) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID), dao.DeptID.Eq(deptID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByUsername 根据Username删除多条数据
func (u *UserDemoRepo) DeleteMultiByUsername(ctx context.Context, username string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByUsername 根据Username删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByUsername(ctx context.Context, username string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUsername 根据username删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByUsername(ctx context.Context, username string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByUsername 根据username删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByUsername(ctx context.Context, username string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByUsernameTx 根据username删除多条数据
func (u *UserDemoRepo) DeleteMultiByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByUsernameTx 根据username删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUsernameTx 根据username删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByUsernameTx 根据username删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByUsernameTx(ctx context.Context, tx *gorm_gen_dao.Query, username string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByUsernames 根据usernames删除多条数据
func (u *UserDemoRepo) DeleteMultiByUsernames(ctx context.Context, usernames []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByUsernames 根据usernames删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByUsernames(ctx context.Context, usernames []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUsernames 根据usernames删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByUsernames(ctx context.Context, usernames []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByUsernames 根据usernames删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByUsernames(ctx context.Context, usernames []string) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByUsernamesTx 根据usernames删除多条数据
func (u *UserDemoRepo) DeleteMultiByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByUsernamesTx 根据usernames删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUsernamesTx 根据usernames删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByUsernamesTx 根据usernames删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByUsernamesTx(ctx context.Context, tx *gorm_gen_dao.Query, usernames []string) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByTenantID 根据TenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiByTenantID(ctx context.Context, tenantID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByTenantID 根据TenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByTenantID(ctx context.Context, tenantID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByTenantID 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByTenantID(ctx context.Context, tenantID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByTenantID 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByTenantID(ctx context.Context, tenantID int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByTenantIDTx 根据tenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByTenantIDTx 根据tenantID删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByTenantIDTx 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByTenantIDTx 根据tenantID删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByTenantIDTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantID int64) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.TenantID.Eq(tenantID)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByTenantIDS 根据tenantIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiByTenantIDS(ctx context.Context, tenantIDS []int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByTenantIDS 根据tenantIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByTenantIDS(ctx context.Context, tenantIDS []int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByTenantIDS 根据tenantIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByTenantIDS(ctx context.Context, tenantIDS []int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByTenantIDS 根据tenantIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByTenantIDS(ctx context.Context, tenantIDS []int64) error {
	dao := gorm_gen_dao.Use(u.db).UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByTenantIDSTx 根据tenantIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByTenantIDSTx 根据tenantIDS删除多条数据
func (u *UserDemoRepo) DeleteMultiUnscopedByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error {
	dao := tx.UserDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByTenantIDSTx 根据tenantIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiCacheByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByTenantIDSTx 根据tenantIDS删除多条数据，并删除缓存
func (u *UserDemoRepo) DeleteMultiUnscopedCacheByTenantIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, tenantIDS []int64) error {
	dao := tx.UserDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.TenantID.In(tenantIDS...)).Delete()
	if err != nil {
		return err
	}
	err = u.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteUniqueIndexCache 删除索引存在的缓存
func (u *UserDemoRepo) DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.UserDemo) error {
	KeyMap := make(map[string]struct{})
	keys := make([]string, 0)
	keys = append(keys, u.cache.Key(CacheUserDemoByConditionPrefix))
	keys = append(keys, u.cache.Key(CacheUserDemoUnscopedByConditionPrefix))
	for _, v := range data {
		if v != nil {
			KeyMap[u.cache.Key(CacheUserDemoByIDPrefix, v.ID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoUnscopedByIDPrefix, v.ID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoByUIDPrefix, v.UID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoUnscopedByUIDPrefix, v.UID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoByUIDStatusPrefix, v.UID, v.Status)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoUnscopedByUIDStatusPrefix, v.UID, v.Status)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoByTenantIDDeptIDPrefix, v.TenantID, v.DeptID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoUnscopedByTenantIDDeptIDPrefix, v.TenantID, v.DeptID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoByUsernamePrefix, v.Username)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoUnscopedByUsernamePrefix, v.Username)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoByTenantIDPrefix, v.TenantID)] = struct{}{}
			KeyMap[u.cache.Key(CacheUserDemoUnscopedByTenantIDPrefix, v.TenantID)] = struct{}{}
		}
	}
	for k := range KeyMap {
		keys = append(keys, k)
	}
	err := u.cache.DelBatch(ctx, keys)
	if err != nil {
		return err
	}
	return nil
}
