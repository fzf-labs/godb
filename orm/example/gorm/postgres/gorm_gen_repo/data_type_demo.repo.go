// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package gorm_gen_repo

import (
	"context"
	"errors"
	"reflect"
	"strings"
	"time"

	"github.com/fzf-labs/godb/orm/condition"
	"github.com/fzf-labs/godb/orm/dbcache"
	"github.com/fzf-labs/godb/orm/encoding"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_dao"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_model"
	"github.com/fzf-labs/godb/orm/gen/config"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var _ IDataTypeDemoRepo = (*DataTypeDemoRepo)(nil)

var (
	CacheDataTypeDemoByConditionPrefix    = "DBCache:gorm_gen:DataTypeDemoByCondition"
	CacheDataTypeDemoByIDPrefix           = "DBCache:gorm_gen:DataTypeDemoByID"
	CacheDataTypeDemoByULidPrefix         = "DBCache:gorm_gen:DataTypeDemoByULid"
	CacheDataTypeDemoByBatchAPIPrefix     = "DBCache:gorm_gen:DataTypeDemoByBatchAPI"
	CacheDataTypeDemoByCacheKeyPrefix     = "DBCache:gorm_gen:DataTypeDemoByCacheKey"
	CacheDataTypeDemoByDataTypeBoolPrefix = "DBCache:gorm_gen:DataTypeDemoByDataTypeBool"
	CacheDataTypeDemoByDataTypeTimePrefix = "DBCache:gorm_gen:DataTypeDemoByDataTypeTime"
)

type (
	IDataTypeDemoRepo interface {
		// DeepCopy 深拷贝
		DeepCopy(data *gorm_gen_model.DataTypeDemo) *gorm_gen_model.DataTypeDemo
		// CreateOne 创建一条数据
		CreateOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// CreateOneCache 创建一条数据, 并删除缓存
		CreateOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// CreateOneByTx 创建一条数据(事务)
		CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
		CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// CreateBatch 批量创建数据
		CreateBatch(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// CreateBatchCache 批量创建数据, 并删除缓存
		CreateBatchCache(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// CreateBatchByTx 批量创建数据(事务)
		CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
		CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// UpsertOne Upsert一条数据
		UpsertOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneCache Upsert一条数据, 并删除缓存
		UpsertOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneByTx Upsert一条数据(事务)
		UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneByFields 根据fields字段Upsert一条数据
		UpsertOneByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
		UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
		UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpdateOne 更新一条数据
		UpdateOne(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCache 更新一条数据，并删除缓存
		UpdateOneCache(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneByTx 更新一条数据(事务)
		UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
		UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateBatchByIDS 根据主键IDS批量更新
		UpdateBatchByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error
		// UpdateBatchByIDSTx 根据主键IDS批量更新(事务)
		UpdateBatchByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error
		// FindOneByID 根据ID查询一条数据
		FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneCacheByID 根据ID查询一条数据，并设置缓存
		FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByIDS 根据IDS查询多条数据
		FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByIDS 根据IDS查询多条数据，并设置缓存
		FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindOneByULid 根据uLid查询一条数据
		FindOneByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneCacheByULid 根据uLid查询一条数据，并设置缓存
		FindOneCacheByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByULids 根据uLids查询多条数据
		FindMultiByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByULids 根据uLids查询多条数据，并设置缓存
		FindMultiCacheByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByBatchAPI 根据batchAPI查询多条数据
		FindMultiByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByBatchAPI 根据batchAPI查询多条数据并设置缓存
		FindMultiCacheByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByBatchAPIS 根据batchAPIS查询多条数据
		FindMultiByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByBatchAPIS 根据batchAPIS查询多条数据，并设置缓存
		FindMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByCacheKey 根据_cacheKey查询多条数据
		FindMultiByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByCacheKey 根据_cacheKey查询多条数据并设置缓存
		FindMultiCacheByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByCacheKeys 根据_cacheKeys查询多条数据
		FindMultiByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByCacheKeys 根据_cacheKeys查询多条数据，并设置缓存
		FindMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByDataTypeBool 根据dataTypeBool查询多条数据
		FindMultiByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByDataTypeBool 根据dataTypeBool查询多条数据并设置缓存
		FindMultiCacheByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByDataTypeTime 根据dataTypeTime查询多条数据
		FindMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByDataTypeTime 根据dataTypeTime查询多条数据并设置缓存
		FindMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByDataTypeTimes 根据dataTypeTimes查询多条数据
		FindMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByDataTypeTimes 根据dataTypeTimes查询多条数据，并设置缓存
		FindMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByCondition 自定义查询数据(通用)
		FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error)
		// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
		FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error)
		// DeleteOneByID 根据ID删除一条数据
		DeleteOneByID(ctx context.Context, ID string) error
		// DeleteOneCacheByID 根据ID删除一条数据，并删除缓存
		DeleteOneCacheByID(ctx context.Context, ID string) error
		// DeleteOneByIDTx 根据ID删除一条数据(事务)
		DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneCacheByIDTx 根据ID删除一条数据，并删除缓存(事务)
		DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteMultiByIDS 根据IDS删除多条数据
		DeleteMultiByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiCacheByIDS 根据IDS删除多条数据，并删除缓存
		DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiByIDSTx 根据IDS删除多条数据(事务)
		DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiCacheByIDSTx 根据IDS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteOneByULid 根据uLid删除一条数据
		DeleteOneByULid(ctx context.Context, uLid string) error
		// DeleteOneCacheByULid 根据uLid删除一条数据，并删除缓存
		DeleteOneCacheByULid(ctx context.Context, uLid string) error
		// DeleteOneByULidTx 根据uLid删除一条数据(事务)
		DeleteOneByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error
		// DeleteOneCacheByULidTx 根据uLid删除一条数据，并删除缓存(事务)
		DeleteOneCacheByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error
		// DeleteMultiByULids 根据ULids删除多条数据
		DeleteMultiByULids(ctx context.Context, uLids []string) error
		// DeleteMultiCacheByULids 根据ULids删除多条数据，并删除缓存
		DeleteMultiCacheByULids(ctx context.Context, uLids []string) error
		// DeleteMultiByULidsTx 根据ULids删除多条数据(事务)
		DeleteMultiByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error
		// DeleteMultiCacheByULidsTx 根据ULids删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error
		// DeleteMultiByBatchAPI 根据BatchAPI删除多条数据
		DeleteMultiByBatchAPI(ctx context.Context, batchAPI string) error
		// DeleteMultiCacheByBatchAPI 根据batchAPI删除多条数据，并删除缓存
		DeleteMultiCacheByBatchAPI(ctx context.Context, batchAPI string) error
		// DeleteMultiByBatchAPITx 根据batchAPI删除多条数据
		DeleteMultiByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error
		// DeleteMultiCacheByBatchAPITx 根据batchAPI删除多条数据，并删除缓存
		DeleteMultiCacheByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error
		// DeleteMultiByBatchAPIS 根据BatchAPIS删除多条数据
		DeleteMultiByBatchAPIS(ctx context.Context, batchAPIS []string) error
		// DeleteMultiCacheByBatchAPIS 根据BatchAPIS删除多条数据，并删除缓存
		DeleteMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) error
		// DeleteMultiByBatchAPISTx 根据BatchAPIS删除多条数据(事务)
		DeleteMultiByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error
		// DeleteMultiCacheByBatchAPISTx 根据BatchAPIS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error
		// DeleteMultiByCacheKey 根据CacheKey删除多条数据
		DeleteMultiByCacheKey(ctx context.Context, _cacheKey string) error
		// DeleteMultiCacheByCacheKey 根据_cacheKey删除多条数据，并删除缓存
		DeleteMultiCacheByCacheKey(ctx context.Context, _cacheKey string) error
		// DeleteMultiByCacheKeyTx 根据_cacheKey删除多条数据
		DeleteMultiByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error
		// DeleteMultiCacheByCacheKeyTx 根据_cacheKey删除多条数据，并删除缓存
		DeleteMultiCacheByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error
		// DeleteMultiByCacheKeys 根据CacheKeys删除多条数据
		DeleteMultiByCacheKeys(ctx context.Context, _cacheKeys []string) error
		// DeleteMultiCacheByCacheKeys 根据CacheKeys删除多条数据，并删除缓存
		DeleteMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) error
		// DeleteMultiByCacheKeysTx 根据CacheKeys删除多条数据(事务)
		DeleteMultiByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error
		// DeleteMultiCacheByCacheKeysTx 根据CacheKeys删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error
		// DeleteMultiByDataTypeTime 根据DataTypeTime删除多条数据
		DeleteMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error
		// DeleteMultiCacheByDataTypeTime 根据dataTypeTime删除多条数据，并删除缓存
		DeleteMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error
		// DeleteMultiByDataTypeTimeTx 根据dataTypeTime删除多条数据
		DeleteMultiByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error
		// DeleteMultiCacheByDataTypeTimeTx 根据dataTypeTime删除多条数据，并删除缓存
		DeleteMultiCacheByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error
		// DeleteMultiByDataTypeTimes 根据DataTypeTimes删除多条数据
		DeleteMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error
		// DeleteMultiCacheByDataTypeTimes 根据DataTypeTimes删除多条数据，并删除缓存
		DeleteMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error
		// DeleteMultiByDataTypeTimesTx 根据DataTypeTimes删除多条数据(事务)
		DeleteMultiByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error
		// DeleteMultiCacheByDataTypeTimesTx 根据DataTypeTimes删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error
		// DeleteIndexCache 删除索引存在的缓存
		DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.DataTypeDemo) error
	}
	DataTypeDemoRepo struct {
		db       *gorm.DB
		cache    dbcache.IDBCache
		encoding encoding.API
	}
)

func NewDataTypeDemoRepo(cfg *config.Repo) *DataTypeDemoRepo {
	return &DataTypeDemoRepo{
		db:       cfg.DB,
		cache:    cfg.Cache,
		encoding: cfg.Encoding,
	}
}

// DeepCopy 深拷贝
func (d *DataTypeDemoRepo) DeepCopy(data *gorm_gen_model.DataTypeDemo) *gorm_gen_model.DataTypeDemo {
	newData := new(gorm_gen_model.DataTypeDemo)
	*newData = *data
	return newData
}

// CreateOne 创建一条数据
func (d *DataTypeDemoRepo) CreateOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCache 创建一条数据, 并删除缓存
func (d *DataTypeDemoRepo) CreateOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneByTx 创建一条数据(事务)
func (d *DataTypeDemoRepo) CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
func (d *DataTypeDemoRepo) CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatch 批量创建数据
func (d *DataTypeDemoRepo) CreateBatch(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCache 批量创建数据, 并删除缓存
func (d *DataTypeDemoRepo) CreateBatchCache(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchByTx 批量创建数据(事务)
func (d *DataTypeDemoRepo) CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
func (d *DataTypeDemoRepo) CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOne Upsert一条数据
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCache Upsert一条数据, 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	oldData, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByTx Upsert一条数据(事务)
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	oldData, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFields 根据fields字段Upsert一条数据
func (d *DataTypeDemoRepo) UpsertOneByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
func (d *DataTypeDemoRepo) UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.DataTypeDemo{}
	err := d.db.Model(&gorm_gen_model.DataTypeDemo{}).Clauses(whereExpressions...).First(oldData).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return err
	}
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
func (d *DataTypeDemoRepo) UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
func (d *DataTypeDemoRepo) UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.DataTypeDemo{}
	err := d.db.Model(&gorm_gen_model.DataTypeDemo{}).Clauses(whereExpressions...).First(oldData).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return err
	}
	dao := tx.DataTypeDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOne 更新一条数据
// data 中主键字段必须有值，零值不会被更新
func (d *DataTypeDemoRepo) UpdateOne(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCache 更新一条数据，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCache(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneByTx 更新一条数据(事务)
// data 中主键字段必须有值，零值不会被更新
func (d *DataTypeDemoRepo) UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return err
}

// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return err
}

// UpdateOneWithZero 更新一条数据,包含零值
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (d *DataTypeDemoRepo) UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZeroByTx 更新一条数据(事务),包含零值，
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (d *DataTypeDemoRepo) UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return err
}

// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return err
}

// UpdateBatchByIDS 根据主键IDS批量更新
// 零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDSTx 根据主键IDS批量更新(事务)
// 零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// FindOneByID 根据ID查询一条数据
func (d *DataTypeDemoRepo) FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByID 根据ID查询一条数据，并设置缓存
func (d *DataTypeDemoRepo) FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error) {
	resp := new(gorm_gen_model.DataTypeDemo)
	cacheKey := d.cache.Key(CacheDataTypeDemoByIDPrefix, ID)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByIDS 根据IDS查询多条数据
func (d *DataTypeDemoRepo) FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByIDS 根据IDS查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range IDS {
		cacheKey := d.cache.Key(CacheDataTypeDemoByIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := d.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[d.cache.Key(CacheDataTypeDemoByIDPrefix, v.ID)] = string(marshal)
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.DataTypeDemo)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindOneByULid 根据uLid查询一条数据
func (d *DataTypeDemoRepo) FindOneByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByULid 根据uLid查询一条数据，并设置缓存
func (d *DataTypeDemoRepo) FindOneCacheByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error) {
	resp := new(gorm_gen_model.DataTypeDemo)
	cacheKey := d.cache.Key(CacheDataTypeDemoByULidPrefix, uLid)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByULids 根据uLids查询多条数据
func (d *DataTypeDemoRepo) FindMultiByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByULids 根据uLids查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range uLids {
		cacheKey := d.cache.Key(CacheDataTypeDemoByULidPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ULid.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := d.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[d.cache.Key(CacheDataTypeDemoByULidPrefix, v.ULid)] = string(marshal)
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.DataTypeDemo)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiByBatchAPI 根据batchAPI查询多条数据
func (d *DataTypeDemoRepo) FindMultiByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByBatchAPI 根据batchAPI查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, batchAPI)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByBatchAPIS 根据batchAPIS查询多条数据
func (d *DataTypeDemoRepo) FindMultiByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByBatchAPIS 根据batchAPIS查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range batchAPIS {
		cacheKey := d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, v.BatchAPI)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByCacheKey 根据_cacheKey查询多条数据
func (d *DataTypeDemoRepo) FindMultiByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByCacheKey 根据_cacheKey查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, _cacheKey)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByCacheKeys 根据_cacheKeys查询多条数据
func (d *DataTypeDemoRepo) FindMultiByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByCacheKeys 根据_cacheKeys查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range _cacheKeys {
		cacheKey := d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, v.CacheKey)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByDataTypeBool 根据dataTypeBool查询多条数据
func (d *DataTypeDemoRepo) FindMultiByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeBool.Is(dataTypeBool)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByDataTypeBool 根据dataTypeBool查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByDataTypeBoolPrefix, dataTypeBool)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.DataTypeBool.Is(dataTypeBool)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByDataTypeTime 根据dataTypeTime查询多条数据
func (d *DataTypeDemoRepo) FindMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByDataTypeTime 根据dataTypeTime查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, dataTypeTime)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByDataTypeTimes 根据dataTypeTimes查询多条数据
func (d *DataTypeDemoRepo) FindMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByDataTypeTimes 根据dataTypeTimes查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]time.Time)
	for _, v := range dataTypeTimes {
		cacheKey := d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]time.Time, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, v.DataTypeTime)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByCondition 自定义查询数据(通用)
func (d *DataTypeDemoRepo) FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.DataTypeDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.DataTypeDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = d.db.WithContext(ctx).Model(&gorm_gen_model.DataTypeDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := d.db.WithContext(ctx).Model(&gorm_gen_model.DataTypeDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.DataTypeDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.DataTypeDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := d.cache.Key(CacheDataTypeDemoByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := d.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := d.FindMultiByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := d.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// DeleteOneByID 根据ID删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByID 根据ID删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByID 根据ID删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByIDTx 根据ID删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDS 根据IDS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDS 根据IDS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDSTx 根据IDS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDSTx 根据IDS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByULid 根据uLid删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByULid(ctx context.Context, uLid string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByULid 根据uLid删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByULid(ctx context.Context, uLid string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByULid 根据uLid删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByULidTx 根据uLid删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByULids 根据uLids删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByULids(ctx context.Context, uLids []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByULids 根据uLids删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByULids(ctx context.Context, uLids []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByULidsTx 根据uLids删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByULidsTx 根据uLids删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPI 根据BatchAPI删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPI(ctx context.Context, batchAPI string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPI 根据batchAPI删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPI(ctx context.Context, batchAPI string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPITx 根据batchAPI删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPITx 根据batchAPI删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPIS 根据batchAPIS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPIS(ctx context.Context, batchAPIS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPIS 根据batchAPIS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPISTx 根据batchAPIS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPISTx 根据batchAPIS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKey 根据CacheKey删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKey(ctx context.Context, _cacheKey string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKey 根据_cacheKey删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKey(ctx context.Context, _cacheKey string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKeyTx 根据_cacheKey删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKeyTx 根据_cacheKey删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKeys 根据_cacheKeys删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKeys(ctx context.Context, _cacheKeys []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKeys 根据_cacheKeys删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKeysTx 根据_cacheKeys删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKeysTx 根据_cacheKeys删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTime 根据DataTypeTime删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTime 根据dataTypeTime删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTimeTx 根据dataTypeTime删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTimeTx 根据dataTypeTime删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTimes 根据dataTypeTimes删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTimes 根据dataTypeTimes删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTimesTx 根据dataTypeTimes删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTimesTx 根据dataTypeTimes删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteUniqueIndexCache 删除索引存在的缓存
func (d *DataTypeDemoRepo) DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.DataTypeDemo) error {
	KeyMap := make(map[string]struct{})
	keys := make([]string, 0)
	keys = append(keys, d.cache.Key(CacheDataTypeDemoByConditionPrefix))
	for _, v := range data {
		if v != nil {
			KeyMap[d.cache.Key(CacheDataTypeDemoByIDPrefix, v.ID)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByULidPrefix, v.ULid)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, v.BatchAPI)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, v.CacheKey)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByDataTypeBoolPrefix, v.DataTypeBool)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, v.DataTypeTime)] = struct{}{}
		}
	}
	for k := range KeyMap {
		keys = append(keys, k)
	}
	err := d.cache.DelBatch(ctx, keys)
	if err != nil {
		return err
	}
	return nil
}
