// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package gorm_gen_repo

import (
	"context"
	"errors"
	"reflect"
	"strings"
	"time"

	"github.com/fzf-labs/godb/orm/condition"
	"github.com/fzf-labs/godb/orm/dbcache"
	"github.com/fzf-labs/godb/orm/encoding"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_dao"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_model"
	"github.com/fzf-labs/godb/orm/gen/config"
	"github.com/jinzhu/copier"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var _ IDataTypeDemoRepo = (*DataTypeDemoRepo)(nil)

var (
	CacheDataTypeDemoByConditionPrefix            = "DBCache:gorm_gen:DataTypeDemoByCondition"
	CacheDataTypeDemoUnscopedByConditionPrefix    = "DBCache:gorm_gen:DataTypeDemoUnscopedByCondition"
	CacheDataTypeDemoByIDPrefix                   = "DBCache:gorm_gen:DataTypeDemoByID"
	CacheDataTypeDemoUnscopedByIDPrefix           = "DBCache:gorm_gen:DataTypeDemoUnscopedByID"
	CacheDataTypeDemoByULidPrefix                 = "DBCache:gorm_gen:DataTypeDemoByULid"
	CacheDataTypeDemoUnscopedByULidPrefix         = "DBCache:gorm_gen:DataTypeDemoUnscopedByULid"
	CacheDataTypeDemoByBatchAPIPrefix             = "DBCache:gorm_gen:DataTypeDemoByBatchAPI"
	CacheDataTypeDemoUnscopedByBatchAPIPrefix     = "DBCache:gorm_gen:DataTypeDemoUnscopedByBatchAPI"
	CacheDataTypeDemoByCacheKeyPrefix             = "DBCache:gorm_gen:DataTypeDemoByCacheKey"
	CacheDataTypeDemoUnscopedByCacheKeyPrefix     = "DBCache:gorm_gen:DataTypeDemoUnscopedByCacheKey"
	CacheDataTypeDemoByDataTypeBoolPrefix         = "DBCache:gorm_gen:DataTypeDemoByDataTypeBool"
	CacheDataTypeDemoUnscopedByDataTypeBoolPrefix = "DBCache:gorm_gen:DataTypeDemoUnscopedByDataTypeBool"
	CacheDataTypeDemoByDataTypeTimePrefix         = "DBCache:gorm_gen:DataTypeDemoByDataTypeTime"
	CacheDataTypeDemoUnscopedByDataTypeTimePrefix = "DBCache:gorm_gen:DataTypeDemoUnscopedByDataTypeTime"
)

type (
	IDataTypeDemoRepo interface {
		// NewData 实例化
		NewData() *gorm_gen_model.DataTypeDemo
		// DeepCopy 深拷贝
		DeepCopy(data *gorm_gen_model.DataTypeDemo) *gorm_gen_model.DataTypeDemo
		// CreateOne 创建一条数据
		CreateOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// CreateOneCache 创建一条数据, 并删除缓存
		CreateOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// CreateOneByTx 创建一条数据(事务)
		CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
		CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// CreateBatch 批量创建数据
		CreateBatch(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// CreateBatchCache 批量创建数据, 并删除缓存
		CreateBatchCache(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// CreateBatchByTx 批量创建数据(事务)
		CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
		CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error
		// UpsertOne Upsert一条数据
		UpsertOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneCache Upsert一条数据, 并删除缓存
		UpsertOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneByTx Upsert一条数据(事务)
		UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error
		// UpsertOneByFields 根据fields字段Upsert一条数据
		UpsertOneByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
		UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
		UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error
		// UpdateOne 更新一条数据
		UpdateOne(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscoped 更新一条数据（包括软删除）
		UpdateOneUnscoped(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCache 更新一条数据，并删除缓存
		UpdateOneCache(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedCache 更新一条数据，并删除缓存（包括软删除）
		UpdateOneUnscopedCache(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneByTx 更新一条数据(事务)
		UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedByTx 更新一条数据(事务)（包括软删除）
		UpdateOneUnscopedByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
		UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedCacheByTx 更新一条数据(事务)，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedWithZero 更新一条数据,包含零值（包括软删除）
		UpdateOneUnscopedWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedCacheWithZero 更新一条数据,包含零值，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedWithZeroByTx 更新一条数据(事务),包含零值（包括软删除）
		UpdateOneUnscopedWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateOneUnscopedCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error
		// UpdateBatchByID 根据字段ID批量更新,零值会被更新
		UpdateBatchByID(ctx context.Context, ID string, data map[string]interface{}) error
		// UpdateBatchUnscopedByID 根据字段ID批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByID(ctx context.Context, ID string, data map[string]interface{}) error
		// UpdateBatchByIDTx 根据主键ID批量更新(事务),零值会被更新
		UpdateBatchByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error
		// UpdateBatchUnscopedByIDTx 根据主键ID批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error
		// UpdateBatchByIDS 根据字段IDS批量更新,零值会被更新
		UpdateBatchByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByIDS 根据字段IDS批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error
		// UpdateBatchByIDSTx 根据字段IDS批量更新(事务),零值会被更新
		UpdateBatchByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByIDSTx 根据字段IDS批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error
		// UpdateBatchByULid 根据字段ULid批量更新,零值会被更新
		UpdateBatchByULid(ctx context.Context, uLid string, data map[string]interface{}) error
		// UpdateBatchUnscopedByULid 根据字段ULid批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByULid(ctx context.Context, uLid string, data map[string]interface{}) error
		// UpdateBatchByULidTx 根据主键ULid批量更新(事务),零值会被更新
		UpdateBatchByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string, data map[string]interface{}) error
		// UpdateBatchUnscopedByULidTx 根据主键ULid批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string, data map[string]interface{}) error
		// UpdateBatchByULids 根据字段ULids批量更新,零值会被更新
		UpdateBatchByULids(ctx context.Context, uLids []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByULids 根据字段ULids批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByULids(ctx context.Context, uLids []string, data map[string]interface{}) error
		// UpdateBatchByULidsTx 根据字段ULids批量更新(事务),零值会被更新
		UpdateBatchByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByULidsTx 根据字段ULids批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string, data map[string]interface{}) error
		// UpdateBatchByBatchAPI 根据字段BatchAPI批量更新,零值会被更新
		UpdateBatchByBatchAPI(ctx context.Context, batchAPI string, data map[string]interface{}) error
		// UpdateBatchUnscopedByBatchAPI 根据字段BatchAPI批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByBatchAPI(ctx context.Context, batchAPI string, data map[string]interface{}) error
		// UpdateBatchByBatchAPITx 根据主键BatchAPI批量更新(事务),零值会被更新
		UpdateBatchByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string, data map[string]interface{}) error
		// UpdateBatchUnscopedByBatchAPITx 根据主键BatchAPI批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string, data map[string]interface{}) error
		// UpdateBatchByBatchAPIS 根据字段BatchAPIS批量更新,零值会被更新
		UpdateBatchByBatchAPIS(ctx context.Context, batchAPIS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByBatchAPIS 根据字段BatchAPIS批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByBatchAPIS(ctx context.Context, batchAPIS []string, data map[string]interface{}) error
		// UpdateBatchByBatchAPISTx 根据字段BatchAPIS批量更新(事务),零值会被更新
		UpdateBatchByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByBatchAPISTx 根据字段BatchAPIS批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string, data map[string]interface{}) error
		// UpdateBatchByCacheKey 根据字段CacheKey批量更新,零值会被更新
		UpdateBatchByCacheKey(ctx context.Context, _cacheKey string, data map[string]interface{}) error
		// UpdateBatchUnscopedByCacheKey 根据字段CacheKey批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByCacheKey(ctx context.Context, _cacheKey string, data map[string]interface{}) error
		// UpdateBatchByCacheKeyTx 根据主键CacheKey批量更新(事务),零值会被更新
		UpdateBatchByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string, data map[string]interface{}) error
		// UpdateBatchUnscopedByCacheKeyTx 根据主键CacheKey批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string, data map[string]interface{}) error
		// UpdateBatchByCacheKeys 根据字段CacheKeys批量更新,零值会被更新
		UpdateBatchByCacheKeys(ctx context.Context, _cacheKeys []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByCacheKeys 根据字段CacheKeys批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByCacheKeys(ctx context.Context, _cacheKeys []string, data map[string]interface{}) error
		// UpdateBatchByCacheKeysTx 根据字段CacheKeys批量更新(事务),零值会被更新
		UpdateBatchByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string, data map[string]interface{}) error
		// UpdateBatchUnscopedByCacheKeysTx 根据字段CacheKeys批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string, data map[string]interface{}) error
		// UpdateBatchByDataTypeBool 根据字段DataTypeBool批量更新,零值会被更新
		UpdateBatchByDataTypeBool(ctx context.Context, dataTypeBool bool, data map[string]interface{}) error
		// UpdateBatchUnscopedByDataTypeBool 根据字段DataTypeBool批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByDataTypeBool(ctx context.Context, dataTypeBool bool, data map[string]interface{}) error
		// UpdateBatchByDataTypeBoolTx 根据主键DataTypeBool批量更新(事务),零值会被更新
		UpdateBatchByDataTypeBoolTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeBool bool, data map[string]interface{}) error
		// UpdateBatchUnscopedByDataTypeBoolTx 根据主键DataTypeBool批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByDataTypeBoolTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeBool bool, data map[string]interface{}) error
		// UpdateBatchByDataTypeTime 根据字段DataTypeTime批量更新,零值会被更新
		UpdateBatchByDataTypeTime(ctx context.Context, dataTypeTime time.Time, data map[string]interface{}) error
		// UpdateBatchUnscopedByDataTypeTime 根据字段DataTypeTime批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByDataTypeTime(ctx context.Context, dataTypeTime time.Time, data map[string]interface{}) error
		// UpdateBatchByDataTypeTimeTx 根据主键DataTypeTime批量更新(事务),零值会被更新
		UpdateBatchByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time, data map[string]interface{}) error
		// UpdateBatchUnscopedByDataTypeTimeTx 根据主键DataTypeTime批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time, data map[string]interface{}) error
		// UpdateBatchByDataTypeTimes 根据字段DataTypeTimes批量更新,零值会被更新
		UpdateBatchByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time, data map[string]interface{}) error
		// UpdateBatchUnscopedByDataTypeTimes 根据字段DataTypeTimes批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time, data map[string]interface{}) error
		// UpdateBatchByDataTypeTimesTx 根据字段DataTypeTimes批量更新(事务),零值会被更新
		UpdateBatchByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time, data map[string]interface{}) error
		// UpdateBatchUnscopedByDataTypeTimesTx 根据字段DataTypeTimes批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time, data map[string]interface{}) error
		// FindOneByID 根据ID查询一条数据
		FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneUnscopedByID 根据ID查询一条数据（包括软删除）
		FindOneUnscopedByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneCacheByID 根据ID查询一条数据，并设置缓存
		FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneUnscopedCacheByID 根据ID查询一条数据（包括软删除），并设置缓存
		FindOneUnscopedCacheByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByIDS 根据IDS查询多条数据
		FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByIDS 根据IDS查询多条数据（包括软删除）
		FindMultiUnscopedByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByIDS 根据IDS查询多条数据，并设置缓存
		FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByIDS 根据IDS查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindOneByULid 根据uLid查询一条数据
		FindOneByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneUnscopedByULid 根据uLid查询一条数据（包括软删除）
		FindOneUnscopedByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneCacheByULid 根据uLid查询一条数据，并设置缓存
		FindOneCacheByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error)
		// FindOneUnscopedCacheByULid 根据uLid查询一条数据（包括软删除），并设置缓存
		FindOneUnscopedCacheByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByULids 根据uLids查询多条数据
		FindMultiByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByULids 根据uLids查询多条数据（包括软删除）
		FindMultiUnscopedByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByULids 根据uLids查询多条数据，并设置缓存
		FindMultiCacheByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByULids 根据uLids查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByBatchAPI 根据batchAPI查询多条数据
		FindMultiByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByBatchAPI 根据batchAPI查询多条数据（包括软删除）
		FindMultiUnscopedByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByBatchAPI 根据batchAPI查询多条数据并设置缓存
		FindMultiCacheByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByBatchAPI 根据batchAPI查询多条数据（包括软删除）并设置缓存
		FindMultiUnscopedCacheByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByBatchAPIS 根据batchAPIS查询多条数据
		FindMultiByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByBatchAPIS 根据batchAPIS查询多条数据（包括软删除）
		FindMultiUnscopedByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByBatchAPIS 根据batchAPIS查询多条数据，并设置缓存
		FindMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByBatchAPIS 根据batchAPIS查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByCacheKey 根据_cacheKey查询多条数据
		FindMultiByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByCacheKey 根据_cacheKey查询多条数据（包括软删除）
		FindMultiUnscopedByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByCacheKey 根据_cacheKey查询多条数据并设置缓存
		FindMultiCacheByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByCacheKey 根据_cacheKey查询多条数据（包括软删除）并设置缓存
		FindMultiUnscopedCacheByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByCacheKeys 根据_cacheKeys查询多条数据
		FindMultiByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByCacheKeys 根据_cacheKeys查询多条数据（包括软删除）
		FindMultiUnscopedByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByCacheKeys 根据_cacheKeys查询多条数据，并设置缓存
		FindMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByCacheKeys 根据_cacheKeys查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByDataTypeBool 根据dataTypeBool查询多条数据
		FindMultiByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByDataTypeBool 根据dataTypeBool查询多条数据（包括软删除）
		FindMultiUnscopedByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByDataTypeBool 根据dataTypeBool查询多条数据并设置缓存
		FindMultiCacheByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByDataTypeBool 根据dataTypeBool查询多条数据（包括软删除）并设置缓存
		FindMultiUnscopedCacheByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByDataTypeTime 根据dataTypeTime查询多条数据
		FindMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByDataTypeTime 根据dataTypeTime查询多条数据（包括软删除）
		FindMultiUnscopedByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByDataTypeTime 根据dataTypeTime查询多条数据并设置缓存
		FindMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByDataTypeTime 根据dataTypeTime查询多条数据（包括软删除）并设置缓存
		FindMultiUnscopedCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByDataTypeTimes 根据dataTypeTimes查询多条数据
		FindMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedByDataTypeTimes 根据dataTypeTimes查询多条数据（包括软删除）
		FindMultiUnscopedByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiCacheByDataTypeTimes 根据dataTypeTimes查询多条数据，并设置缓存
		FindMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiUnscopedCacheByDataTypeTimes 根据dataTypeTimes查询多条数据（包括软删除），并设置缓存
		FindMultiUnscopedCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error)
		// FindMultiByCondition 自定义查询数据(通用)
		FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error)
		// FindMultiUnscopedByCondition 自定义查询数据(通用)（包括软删除）
		FindMultiUnscopedByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error)
		// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
		FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error)
		// FindMultiUnscopedCacheByCondition 自定义查询数据(通用)（包括软删除）,并设置缓存
		FindMultiUnscopedCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error)
		// DeleteOneByID 根据ID删除一条数据
		DeleteOneByID(ctx context.Context, ID string) error
		// DeleteOneUnscopedByID 根据ID删除一条数据
		DeleteOneUnscopedByID(ctx context.Context, ID string) error
		// DeleteOneCacheByID 根据ID删除一条数据，并删除缓存
		DeleteOneCacheByID(ctx context.Context, ID string) error
		// DeleteOneUnscopedCacheByID 根据ID删除一条数据，并删除缓存
		DeleteOneUnscopedCacheByID(ctx context.Context, ID string) error
		// DeleteOneByIDTx 根据ID删除一条数据(事务)
		DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneUnscopedByIDTx 根据ID删除一条数据(事务)
		DeleteOneUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneCacheByIDTx 根据ID删除一条数据，并删除缓存(事务)
		DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneUnscopedCacheByIDTx 根据ID删除一条数据，并删除缓存(事务)
		DeleteOneUnscopedCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteMultiByIDS 根据IDS删除多条数据
		DeleteMultiByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiUnscopedByIDS 根据IDS删除多条数据
		DeleteMultiUnscopedByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiCacheByIDS 根据IDS删除多条数据，并删除缓存
		DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiUnscopedCacheByIDS 根据IDS删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiByIDSTx 根据IDS删除多条数据(事务)
		DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiUnscopedByIDSTx 根据IDS删除多条数据(事务)
		DeleteMultiUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiCacheByIDSTx 根据IDS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiUnscopedCacheByIDSTx 根据IDS删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteOneByULid 根据uLid删除一条数据
		DeleteOneByULid(ctx context.Context, uLid string) error
		// DeleteOneUnscopedByULid 根据uLid删除一条数据
		DeleteOneUnscopedByULid(ctx context.Context, uLid string) error
		// DeleteOneCacheByULid 根据uLid删除一条数据，并删除缓存
		DeleteOneCacheByULid(ctx context.Context, uLid string) error
		// DeleteOneUnscopedCacheByULid 根据uLid删除一条数据，并删除缓存
		DeleteOneUnscopedCacheByULid(ctx context.Context, uLid string) error
		// DeleteOneByULidTx 根据uLid删除一条数据(事务)
		DeleteOneByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error
		// DeleteOneUnscopedByULidTx 根据uLid删除一条数据(事务)
		DeleteOneUnscopedByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error
		// DeleteOneCacheByULidTx 根据uLid删除一条数据，并删除缓存(事务)
		DeleteOneCacheByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error
		// DeleteOneUnscopedCacheByULidTx 根据uLid删除一条数据，并删除缓存(事务)
		DeleteOneUnscopedCacheByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error
		// DeleteMultiByULids 根据ULids删除多条数据
		DeleteMultiByULids(ctx context.Context, uLids []string) error
		// DeleteMultiUnscopedByULids 根据ULids删除多条数据
		DeleteMultiUnscopedByULids(ctx context.Context, uLids []string) error
		// DeleteMultiCacheByULids 根据ULids删除多条数据，并删除缓存
		DeleteMultiCacheByULids(ctx context.Context, uLids []string) error
		// DeleteMultiUnscopedCacheByULids 根据ULids删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByULids(ctx context.Context, uLids []string) error
		// DeleteMultiByULidsTx 根据ULids删除多条数据(事务)
		DeleteMultiByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error
		// DeleteMultiUnscopedByULidsTx 根据ULids删除多条数据(事务)
		DeleteMultiUnscopedByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error
		// DeleteMultiCacheByULidsTx 根据ULids删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error
		// DeleteMultiUnscopedCacheByULidsTx 根据ULids删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error
		// DeleteMultiByBatchAPI 根据BatchAPI删除多条数据
		DeleteMultiByBatchAPI(ctx context.Context, batchAPI string) error
		// DeleteMultiUnscopedByBatchAPI 根据BatchAPI删除多条数据
		DeleteMultiUnscopedByBatchAPI(ctx context.Context, batchAPI string) error
		// DeleteMultiCacheByBatchAPI 根据batchAPI删除多条数据，并删除缓存
		DeleteMultiCacheByBatchAPI(ctx context.Context, batchAPI string) error
		// DeleteMultiUnscopedCacheByBatchAPI 根据batchAPI删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByBatchAPI(ctx context.Context, batchAPI string) error
		// DeleteMultiByBatchAPITx 根据batchAPI删除多条数据
		DeleteMultiByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error
		// DeleteMultiUnscopedByBatchAPITx 根据batchAPI删除多条数据
		DeleteMultiUnscopedByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error
		// DeleteMultiCacheByBatchAPITx 根据batchAPI删除多条数据，并删除缓存
		DeleteMultiCacheByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error
		// DeleteMultiUnscopedCacheByBatchAPITx 根据batchAPI删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error
		// DeleteMultiByBatchAPIS 根据BatchAPIS删除多条数据
		DeleteMultiByBatchAPIS(ctx context.Context, batchAPIS []string) error
		// DeleteMultiUnscopedByBatchAPIS 根据BatchAPIS删除多条数据
		DeleteMultiUnscopedByBatchAPIS(ctx context.Context, batchAPIS []string) error
		// DeleteMultiCacheByBatchAPIS 根据BatchAPIS删除多条数据，并删除缓存
		DeleteMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) error
		// DeleteMultiUnscopedCacheByBatchAPIS 根据BatchAPIS删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByBatchAPIS(ctx context.Context, batchAPIS []string) error
		// DeleteMultiByBatchAPISTx 根据BatchAPIS删除多条数据(事务)
		DeleteMultiByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error
		// DeleteMultiUnscopedByBatchAPISTx 根据BatchAPIS删除多条数据(事务)
		DeleteMultiUnscopedByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error
		// DeleteMultiCacheByBatchAPISTx 根据BatchAPIS删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error
		// DeleteMultiUnscopedCacheByBatchAPISTx 根据BatchAPIS删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error
		// DeleteMultiByCacheKey 根据CacheKey删除多条数据
		DeleteMultiByCacheKey(ctx context.Context, _cacheKey string) error
		// DeleteMultiUnscopedByCacheKey 根据CacheKey删除多条数据
		DeleteMultiUnscopedByCacheKey(ctx context.Context, _cacheKey string) error
		// DeleteMultiCacheByCacheKey 根据_cacheKey删除多条数据，并删除缓存
		DeleteMultiCacheByCacheKey(ctx context.Context, _cacheKey string) error
		// DeleteMultiUnscopedCacheByCacheKey 根据_cacheKey删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByCacheKey(ctx context.Context, _cacheKey string) error
		// DeleteMultiByCacheKeyTx 根据_cacheKey删除多条数据
		DeleteMultiByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error
		// DeleteMultiUnscopedByCacheKeyTx 根据_cacheKey删除多条数据
		DeleteMultiUnscopedByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error
		// DeleteMultiCacheByCacheKeyTx 根据_cacheKey删除多条数据，并删除缓存
		DeleteMultiCacheByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error
		// DeleteMultiUnscopedCacheByCacheKeyTx 根据_cacheKey删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error
		// DeleteMultiByCacheKeys 根据CacheKeys删除多条数据
		DeleteMultiByCacheKeys(ctx context.Context, _cacheKeys []string) error
		// DeleteMultiUnscopedByCacheKeys 根据CacheKeys删除多条数据
		DeleteMultiUnscopedByCacheKeys(ctx context.Context, _cacheKeys []string) error
		// DeleteMultiCacheByCacheKeys 根据CacheKeys删除多条数据，并删除缓存
		DeleteMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) error
		// DeleteMultiUnscopedCacheByCacheKeys 根据CacheKeys删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByCacheKeys(ctx context.Context, _cacheKeys []string) error
		// DeleteMultiByCacheKeysTx 根据CacheKeys删除多条数据(事务)
		DeleteMultiByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error
		// DeleteMultiUnscopedByCacheKeysTx 根据CacheKeys删除多条数据(事务)
		DeleteMultiUnscopedByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error
		// DeleteMultiCacheByCacheKeysTx 根据CacheKeys删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error
		// DeleteMultiUnscopedCacheByCacheKeysTx 根据CacheKeys删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error
		// DeleteMultiByDataTypeTime 根据DataTypeTime删除多条数据
		DeleteMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error
		// DeleteMultiUnscopedByDataTypeTime 根据DataTypeTime删除多条数据
		DeleteMultiUnscopedByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error
		// DeleteMultiCacheByDataTypeTime 根据dataTypeTime删除多条数据，并删除缓存
		DeleteMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error
		// DeleteMultiUnscopedCacheByDataTypeTime 根据dataTypeTime删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error
		// DeleteMultiByDataTypeTimeTx 根据dataTypeTime删除多条数据
		DeleteMultiByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error
		// DeleteMultiUnscopedByDataTypeTimeTx 根据dataTypeTime删除多条数据
		DeleteMultiUnscopedByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error
		// DeleteMultiCacheByDataTypeTimeTx 根据dataTypeTime删除多条数据，并删除缓存
		DeleteMultiCacheByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error
		// DeleteMultiUnscopedCacheByDataTypeTimeTx 根据dataTypeTime删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error
		// DeleteMultiByDataTypeTimes 根据DataTypeTimes删除多条数据
		DeleteMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error
		// DeleteMultiUnscopedByDataTypeTimes 根据DataTypeTimes删除多条数据
		DeleteMultiUnscopedByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error
		// DeleteMultiCacheByDataTypeTimes 根据DataTypeTimes删除多条数据，并删除缓存
		DeleteMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error
		// DeleteMultiUnscopedCacheByDataTypeTimes 根据DataTypeTimes删除多条数据，并删除缓存
		DeleteMultiUnscopedCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error
		// DeleteMultiByDataTypeTimesTx 根据DataTypeTimes删除多条数据(事务)
		DeleteMultiByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error
		// DeleteMultiUnscopedByDataTypeTimesTx 根据DataTypeTimes删除多条数据(事务)
		DeleteMultiUnscopedByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error
		// DeleteMultiCacheByDataTypeTimesTx 根据DataTypeTimes删除多条数据，并删除缓存(事务)
		DeleteMultiCacheByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error
		// DeleteMultiUnscopedCacheByDataTypeTimesTx 根据DataTypeTimes删除多条数据，并删除缓存(事务)
		DeleteMultiUnscopedCacheByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error
		// DeleteIndexCache 删除索引存在的缓存
		DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.DataTypeDemo) error
	}
	DataTypeDemoRepo struct {
		db       *gorm.DB
		cache    dbcache.IDBCache
		encoding encoding.API
	}
)

func NewDataTypeDemoRepo(cfg *config.Repo) *DataTypeDemoRepo {
	return &DataTypeDemoRepo{
		db:       cfg.DB,
		cache:    cfg.Cache,
		encoding: cfg.Encoding,
	}
}

// NewData 实例化
func (d *DataTypeDemoRepo) NewData() *gorm_gen_model.DataTypeDemo {
	return &gorm_gen_model.DataTypeDemo{}
}

// DeepCopy 深拷贝
func (d *DataTypeDemoRepo) DeepCopy(data *gorm_gen_model.DataTypeDemo) *gorm_gen_model.DataTypeDemo {
	newData := new(gorm_gen_model.DataTypeDemo)
	_ = copier.CopyWithOption(newData, data, copier.Option{DeepCopy: true})
	return newData
}

// CreateOne 创建一条数据
func (d *DataTypeDemoRepo) CreateOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCache 创建一条数据, 并删除缓存
func (d *DataTypeDemoRepo) CreateOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneByTx 创建一条数据(事务)
func (d *DataTypeDemoRepo) CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
func (d *DataTypeDemoRepo) CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatch 批量创建数据
func (d *DataTypeDemoRepo) CreateBatch(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCache 批量创建数据, 并删除缓存
func (d *DataTypeDemoRepo) CreateBatchCache(ctx context.Context, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchByTx 批量创建数据(事务)
func (d *DataTypeDemoRepo) CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
func (d *DataTypeDemoRepo) CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.DataTypeDemo, batchSize int) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOne Upsert一条数据
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOne(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCache Upsert一条数据, 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOneCache(ctx context.Context, data *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	oldData, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Unscoped().First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByTx Upsert一条数据(事务)
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (d *DataTypeDemoRepo) UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	oldData, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Unscoped().First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFields 根据fields字段Upsert一条数据
func (d *DataTypeDemoRepo) UpsertOneByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
func (d *DataTypeDemoRepo) UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.DataTypeDemo{}
	err := d.db.Model(&gorm_gen_model.DataTypeDemo{}).Clauses(whereExpressions...).Unscoped().First(oldData).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return err
	}
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
func (d *DataTypeDemoRepo) UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := tx.DataTypeDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
func (d *DataTypeDemoRepo) UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.DataTypeDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.DataTypeDemo{}
	err := d.db.Model(&gorm_gen_model.DataTypeDemo{}).Clauses(whereExpressions...).Unscoped().First(oldData).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return err
	}
	dao := tx.DataTypeDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOne 更新一条数据
// data 中主键字段必须有值，零值不会被更新
func (d *DataTypeDemoRepo) UpdateOne(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscoped 更新一条数据（包括软删除）
// data 中主键字段必须有值，零值不会被更新
func (d *DataTypeDemoRepo) UpdateOneUnscoped(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCache 更新一条数据，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCache(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCache 更新一条数据，并删除缓存（包括软删除）
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneUnscopedCache(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneByTx 更新一条数据(事务)
// data 中主键字段必须有值，零值不会被更新
func (d *DataTypeDemoRepo) UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedByTx 更新一条数据(事务)（包括软删除）
// data 中主键字段必须有值，零值不会被更新
func (d *DataTypeDemoRepo) UpdateOneUnscopedByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheByTx 更新一条数据(事务)，并删除缓存（包括软删除）
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneUnscopedCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZero 更新一条数据,包含零值
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (d *DataTypeDemoRepo) UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedWithZero 更新一条数据,包含零值（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (d *DataTypeDemoRepo) UpdateOneUnscopedWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheWithZero 更新一条数据,包含零值，并删除缓存（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneUnscopedCacheWithZero(ctx context.Context, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZeroByTx 更新一条数据(事务),包含零值，
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (d *DataTypeDemoRepo) UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedWithZeroByTx 更新一条数据(事务),包含零值（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (d *DataTypeDemoRepo) UpdateOneUnscopedWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (d *DataTypeDemoRepo) UpdateOneUnscopedCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.DataTypeDemo, oldData *gorm_gen_model.DataTypeDemo) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByID 根据字段ID批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByID(ctx context.Context, ID string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByID 根据字段ID批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByID(ctx context.Context, ID string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDTx 根据字段ID批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByIDTx 根据字段ID批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDS 根据字段IDS批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByIDS 根据字段IDS批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByIDS(ctx context.Context, IDS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByIDSTx 根据字段IDS批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByIDSTx 根据字段IDS批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByULid 根据字段ULid批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByULid(ctx context.Context, uLid string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByULid 根据字段ULid批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByULid(ctx context.Context, uLid string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByULidTx 根据字段ULid批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByULidTx 根据字段ULid批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByULids 根据字段ULids批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByULids(ctx context.Context, uLids []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByULids 根据字段ULids批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByULids(ctx context.Context, uLids []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByULidsTx 根据字段ULids批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByULidsTx 根据字段ULids批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByBatchAPI 根据字段BatchAPI批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByBatchAPI(ctx context.Context, batchAPI string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByBatchAPI 根据字段BatchAPI批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByBatchAPI(ctx context.Context, batchAPI string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByBatchAPITx 根据字段BatchAPI批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByBatchAPITx 根据字段BatchAPI批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByBatchAPIS 根据字段BatchAPIS批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByBatchAPIS(ctx context.Context, batchAPIS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByBatchAPIS 根据字段BatchAPIS批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByBatchAPIS(ctx context.Context, batchAPIS []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByBatchAPISTx 根据字段BatchAPIS批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByBatchAPISTx 根据字段BatchAPIS批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByCacheKey 根据字段CacheKey批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByCacheKey(ctx context.Context, _cacheKey string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByCacheKey 根据字段CacheKey批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByCacheKey(ctx context.Context, _cacheKey string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByCacheKeyTx 根据字段CacheKey批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByCacheKeyTx 根据字段CacheKey批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByCacheKeys 根据字段CacheKeys批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByCacheKeys(ctx context.Context, _cacheKeys []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByCacheKeys 根据字段CacheKeys批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByCacheKeys(ctx context.Context, _cacheKeys []string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByCacheKeysTx 根据字段CacheKeys批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByCacheKeysTx 根据字段CacheKeys批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByDataTypeBool 根据字段DataTypeBool批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByDataTypeBool(ctx context.Context, dataTypeBool bool, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeBool.Is(dataTypeBool)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByDataTypeBool 根据字段DataTypeBool批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByDataTypeBool(ctx context.Context, dataTypeBool bool, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeBool.Is(dataTypeBool)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByDataTypeBoolTx 根据字段DataTypeBool批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByDataTypeBoolTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeBool bool, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeBool.Is(dataTypeBool)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByDataTypeBoolTx 根据字段DataTypeBool批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByDataTypeBoolTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeBool bool, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeBool.Is(dataTypeBool)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByDataTypeTime 根据字段DataTypeTime批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByDataTypeTime(ctx context.Context, dataTypeTime time.Time, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByDataTypeTime 根据字段DataTypeTime批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByDataTypeTime(ctx context.Context, dataTypeTime time.Time, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByDataTypeTimeTx 根据字段DataTypeTime批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByDataTypeTimeTx 根据字段DataTypeTime批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByDataTypeTimes 根据字段DataTypeTimes批量更新,零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByDataTypeTimes 根据字段DataTypeTimes批量更新,零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByDataTypeTimesTx 根据字段DataTypeTimes批量更新(事务),零值会被更新
func (d *DataTypeDemoRepo) UpdateBatchByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByDataTypeTimesTx 根据字段DataTypeTimes批量更新(事务),零值会被更新（包括软删除）
func (d *DataTypeDemoRepo) UpdateBatchUnscopedByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time, data map[string]interface{}) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// FindOneByID 根据ID查询一条数据
func (d *DataTypeDemoRepo) FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneUnscopedByID 根据ID查询一条数据（包括软删除）
func (d *DataTypeDemoRepo) FindOneUnscopedByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByID 根据ID查询一条数据，并设置缓存
func (d *DataTypeDemoRepo) FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error) {
	resp := new(gorm_gen_model.DataTypeDemo)
	cacheKey := d.cache.Key(CacheDataTypeDemoByIDPrefix, ID)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneUnscopedCacheByID 根据ID查询一条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindOneUnscopedCacheByID(ctx context.Context, ID string) (*gorm_gen_model.DataTypeDemo, error) {
	resp := new(gorm_gen_model.DataTypeDemo)
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByIDPrefix, ID)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByIDS 根据IDS查询多条数据
func (d *DataTypeDemoRepo) FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByIDS 根据IDS查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByIDS 根据IDS查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range IDS {
		cacheKey := d.cache.Key(CacheDataTypeDemoByIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := d.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[d.cache.Key(CacheDataTypeDemoByIDPrefix, v.ID)] = string(marshal)
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.DataTypeDemo)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByIDS 根据IDS查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range IDS {
		cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := d.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[d.cache.Key(CacheDataTypeDemoUnscopedByIDPrefix, v.ID)] = string(marshal)
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.DataTypeDemo)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindOneByULid 根据uLid查询一条数据
func (d *DataTypeDemoRepo) FindOneByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneUnscopedByULid 根据uLid查询一条数据（包括软删除）
func (d *DataTypeDemoRepo) FindOneUnscopedByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByULid 根据uLid查询一条数据，并设置缓存
func (d *DataTypeDemoRepo) FindOneCacheByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error) {
	resp := new(gorm_gen_model.DataTypeDemo)
	cacheKey := d.cache.Key(CacheDataTypeDemoByULidPrefix, uLid)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneUnscopedCacheByULid 根据uLid查询一条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindOneUnscopedCacheByULid(ctx context.Context, uLid string) (*gorm_gen_model.DataTypeDemo, error) {
	resp := new(gorm_gen_model.DataTypeDemo)
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByULidPrefix, uLid)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByULids 根据uLids查询多条数据
func (d *DataTypeDemoRepo) FindMultiByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByULids 根据uLids查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByULids 根据uLids查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range uLids {
		cacheKey := d.cache.Key(CacheDataTypeDemoByULidPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.ULid.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := d.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[d.cache.Key(CacheDataTypeDemoByULidPrefix, v.ULid)] = string(marshal)
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.DataTypeDemo)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByULids 根据uLids查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByULids(ctx context.Context, uLids []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range uLids {
		cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByULidPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		for _, v := range result {
			marshal, err := d.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			dbValue[d.cache.Key(CacheDataTypeDemoUnscopedByULidPrefix, v.ULid)] = string(marshal)
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.DataTypeDemo)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiByBatchAPI 根据batchAPI查询多条数据
func (d *DataTypeDemoRepo) FindMultiByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByBatchAPI 根据batchAPI查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByBatchAPI 根据batchAPI查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, batchAPI)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByBatchAPI 根据batchAPI查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByBatchAPI(ctx context.Context, batchAPI string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByBatchAPIPrefix, batchAPI)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByBatchAPIS 根据batchAPIS查询多条数据
func (d *DataTypeDemoRepo) FindMultiByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByBatchAPIS 根据batchAPIS查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByBatchAPIS 根据batchAPIS查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range batchAPIS {
		cacheKey := d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, v.BatchAPI)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByBatchAPIS 根据batchAPIS查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByBatchAPIS(ctx context.Context, batchAPIS []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range batchAPIS {
		cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByBatchAPIPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoUnscopedByBatchAPIPrefix, v.BatchAPI)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByCacheKey 根据_cacheKey查询多条数据
func (d *DataTypeDemoRepo) FindMultiByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByCacheKey 根据_cacheKey查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByCacheKey 根据_cacheKey查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, _cacheKey)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByCacheKey 根据_cacheKey查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByCacheKey(ctx context.Context, _cacheKey string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByCacheKeyPrefix, _cacheKey)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByCacheKeys 根据_cacheKeys查询多条数据
func (d *DataTypeDemoRepo) FindMultiByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByCacheKeys 根据_cacheKeys查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByCacheKeys 根据_cacheKeys查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range _cacheKeys {
		cacheKey := d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, v.CacheKey)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByCacheKeys 根据_cacheKeys查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByCacheKeys(ctx context.Context, _cacheKeys []string) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range _cacheKeys {
		cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByCacheKeyPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]string, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoUnscopedByCacheKeyPrefix, v.CacheKey)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByDataTypeBool 根据dataTypeBool查询多条数据
func (d *DataTypeDemoRepo) FindMultiByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeBool.Is(dataTypeBool)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByDataTypeBool 根据dataTypeBool查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeBool.Is(dataTypeBool)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByDataTypeBool 根据dataTypeBool查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByDataTypeBoolPrefix, dataTypeBool)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.DataTypeBool.Is(dataTypeBool)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByDataTypeBool 根据dataTypeBool查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByDataTypeBool(ctx context.Context, dataTypeBool bool) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByDataTypeBoolPrefix, dataTypeBool)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeBool.Is(dataTypeBool)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByDataTypeTime 根据dataTypeTime查询多条数据
func (d *DataTypeDemoRepo) FindMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByDataTypeTime 根据dataTypeTime查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByDataTypeTime 根据dataTypeTime查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, dataTypeTime)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByDataTypeTime 根据dataTypeTime查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByDataTypeTimePrefix, dataTypeTime)
	cacheValue, err := d.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := d.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByDataTypeTimes 根据dataTypeTimes查询多条数据
func (d *DataTypeDemoRepo) FindMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiUnscopedByDataTypeTimes 根据dataTypeTimes查询多条数据（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByDataTypeTimes 根据dataTypeTimes查询多条数据，并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]time.Time)
	for _, v := range dataTypeTimes {
		cacheKey := d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]time.Time, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, v.DataTypeTime)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiUnscopedCacheByDataTypeTimes 根据dataTypeTimes查询多条数据（包括软删除），并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) ([]*gorm_gen_model.DataTypeDemo, error) {
	resp := make([]*gorm_gen_model.DataTypeDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]time.Time)
	for _, v := range dataTypeTimes {
		cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByDataTypeTimePrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := d.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		dbValue := make(map[string]string)
		params := make([]time.Time, 0)
		for _, v := range miss {
			dbValue[v] = ""
			params = append(params, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(d.db).DataTypeDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(params...)).Find()
		if err != nil {
			return nil, err
		}
		keyToValues := make(map[string][]*gorm_gen_model.DataTypeDemo)
		for _, v := range result {
			key := d.cache.Key(CacheDataTypeDemoUnscopedByDataTypeTimePrefix, v.DataTypeTime)
			if keyToValues[key] == nil {
				keyToValues[key] = make([]*gorm_gen_model.DataTypeDemo, 0)
			}
			keyToValues[key] = append(keyToValues[key], v)
		}
		for k := range dbValue {
			if keyToValues[k] != nil {
				marshal, err := d.encoding.Marshal(keyToValues[k])
				if err != nil {
					return nil, err
				}
				dbValue[k] = string(marshal)
			}
		}
		return dbValue, nil
	}, d.cache.TTL())
	if err != nil {
		return nil, err
	}
	for _, cacheKey := range cacheKeys {
		if cacheValue[cacheKey] != "" {
			tmp := make([]*gorm_gen_model.DataTypeDemo, 0)
			err := d.encoding.Unmarshal([]byte(cacheValue[cacheKey]), &tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp...)
		}
	}
	return resp, nil
}

// FindMultiByCondition 自定义查询数据(通用)
func (d *DataTypeDemoRepo) FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.DataTypeDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.DataTypeDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = d.db.WithContext(ctx).Model(&gorm_gen_model.DataTypeDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := d.db.WithContext(ctx).Model(&gorm_gen_model.DataTypeDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiUnscopedByCondition 自定义查询数据(通用)（包括软删除）
func (d *DataTypeDemoRepo) FindMultiUnscopedByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.DataTypeDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.DataTypeDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = d.db.WithContext(ctx).Model(&gorm_gen_model.DataTypeDemo{}).Unscoped().Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := d.db.WithContext(ctx).Model(&gorm_gen_model.DataTypeDemo{}).Unscoped().Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
func (d *DataTypeDemoRepo) FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.DataTypeDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.DataTypeDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := d.cache.Key(CacheDataTypeDemoByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := d.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := d.FindMultiByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := d.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// FindMultiUnscopedCacheByCondition 自定义查询数据(通用)（包括软删除）,并设置缓存
func (d *DataTypeDemoRepo) FindMultiUnscopedCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.DataTypeDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.DataTypeDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.DataTypeDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := d.cache.Key(CacheDataTypeDemoUnscopedByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := d.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := d.FindMultiUnscopedByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := d.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, d.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = d.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// DeleteOneByID 根据ID删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByID 根据ID删除一条数据
func (d *DataTypeDemoRepo) DeleteOneUnscopedByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByID 根据ID删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByID 根据ID删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneUnscopedCacheByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByIDTx 根据ID删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByIDTx 根据ID删除一条数据
func (d *DataTypeDemoRepo) DeleteOneUnscopedByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByIDTx 根据ID删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByIDTx 根据ID删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneUnscopedCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDS 根据IDS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByIDS 根据IDS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDS 根据IDS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByIDS 根据IDS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDSTx 根据IDS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByIDSTx 根据IDS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDSTx 根据IDS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByIDSTx 根据IDS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByULid 根据uLid删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByULid(ctx context.Context, uLid string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByULid 根据uLid删除一条数据
func (d *DataTypeDemoRepo) DeleteOneUnscopedByULid(ctx context.Context, uLid string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByULid 根据uLid删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByULid(ctx context.Context, uLid string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByULid 根据uLid删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneUnscopedCacheByULid(ctx context.Context, uLid string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByULidTx 根据uLid删除一条数据
func (d *DataTypeDemoRepo) DeleteOneByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByULidTx 根据uLid删除一条数据
func (d *DataTypeDemoRepo) DeleteOneUnscopedByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByULidTx 根据uLid删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneCacheByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByULidTx 根据uLid删除一条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteOneUnscopedCacheByULidTx(ctx context.Context, tx *gorm_gen_dao.Query, uLid string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ULid.Eq(uLid)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByULids 根据uLids删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByULids(ctx context.Context, uLids []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByULids 根据uLids删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByULids(ctx context.Context, uLids []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByULids 根据uLids删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByULids(ctx context.Context, uLids []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByULids 根据uLids删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByULids(ctx context.Context, uLids []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByULidsTx 根据uLids删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByULidsTx 根据uLids删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByULidsTx 根据uLids删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByULidsTx 根据uLids删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByULidsTx(ctx context.Context, tx *gorm_gen_dao.Query, uLids []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.ULid.In(uLids...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPI 根据BatchAPI删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPI(ctx context.Context, batchAPI string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByBatchAPI 根据BatchAPI删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByBatchAPI(ctx context.Context, batchAPI string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPI 根据batchAPI删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPI(ctx context.Context, batchAPI string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByBatchAPI 根据batchAPI删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByBatchAPI(ctx context.Context, batchAPI string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPITx 根据batchAPI删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByBatchAPITx 根据batchAPI删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPITx 根据batchAPI删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByBatchAPITx 根据batchAPI删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByBatchAPITx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPI string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.Eq(batchAPI)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPIS 根据batchAPIS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPIS(ctx context.Context, batchAPIS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByBatchAPIS 根据batchAPIS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByBatchAPIS(ctx context.Context, batchAPIS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPIS 根据batchAPIS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPIS(ctx context.Context, batchAPIS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByBatchAPIS 根据batchAPIS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByBatchAPIS(ctx context.Context, batchAPIS []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByBatchAPISTx 根据batchAPIS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByBatchAPISTx 根据batchAPIS删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByBatchAPISTx 根据batchAPIS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByBatchAPISTx 根据batchAPIS删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByBatchAPISTx(ctx context.Context, tx *gorm_gen_dao.Query, batchAPIS []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.BatchAPI.In(batchAPIS...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKey 根据CacheKey删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKey(ctx context.Context, _cacheKey string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByCacheKey 根据CacheKey删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByCacheKey(ctx context.Context, _cacheKey string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKey 根据_cacheKey删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKey(ctx context.Context, _cacheKey string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByCacheKey 根据_cacheKey删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByCacheKey(ctx context.Context, _cacheKey string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKeyTx 根据_cacheKey删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByCacheKeyTx 根据_cacheKey删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKeyTx 根据_cacheKey删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByCacheKeyTx 根据_cacheKey删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByCacheKeyTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKey string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.Eq(_cacheKey)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKeys 根据_cacheKeys删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKeys(ctx context.Context, _cacheKeys []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByCacheKeys 根据_cacheKeys删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByCacheKeys(ctx context.Context, _cacheKeys []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKeys 根据_cacheKeys删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKeys(ctx context.Context, _cacheKeys []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByCacheKeys 根据_cacheKeys删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByCacheKeys(ctx context.Context, _cacheKeys []string) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByCacheKeysTx 根据_cacheKeys删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByCacheKeysTx 根据_cacheKeys删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByCacheKeysTx 根据_cacheKeys删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByCacheKeysTx 根据_cacheKeys删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByCacheKeysTx(ctx context.Context, tx *gorm_gen_dao.Query, _cacheKeys []string) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.CacheKey.In(_cacheKeys...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTime 根据DataTypeTime删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByDataTypeTime 根据DataTypeTime删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTime 根据dataTypeTime删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByDataTypeTime 根据dataTypeTime删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByDataTypeTime(ctx context.Context, dataTypeTime time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTimeTx 根据dataTypeTime删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByDataTypeTimeTx 根据dataTypeTime删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTimeTx 根据dataTypeTime删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByDataTypeTimeTx 根据dataTypeTime删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByDataTypeTimeTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTime time.Time) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.Eq(dataTypeTime)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTimes 根据dataTypeTimes删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByDataTypeTimes 根据dataTypeTimes删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTimes 根据dataTypeTimes删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByDataTypeTimes 根据dataTypeTimes删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByDataTypeTimes(ctx context.Context, dataTypeTimes []time.Time) error {
	dao := gorm_gen_dao.Use(d.db).DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByDataTypeTimesTx 根据dataTypeTimes删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedByDataTypeTimesTx 根据dataTypeTimes删除多条数据
func (d *DataTypeDemoRepo) DeleteMultiUnscopedByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error {
	dao := tx.DataTypeDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByDataTypeTimesTx 根据dataTypeTimes删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiCacheByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiUnscopedCacheByDataTypeTimesTx 根据dataTypeTimes删除多条数据，并删除缓存
func (d *DataTypeDemoRepo) DeleteMultiUnscopedCacheByDataTypeTimesTx(ctx context.Context, tx *gorm_gen_dao.Query, dataTypeTimes []time.Time) error {
	dao := tx.DataTypeDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.DataTypeTime.In(dataTypeTimes...)).Delete()
	if err != nil {
		return err
	}
	err = d.DeleteIndexCache(ctx, result...)
	if err != nil {
		return err
	}
	return nil
}

// DeleteUniqueIndexCache 删除索引存在的缓存
func (d *DataTypeDemoRepo) DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.DataTypeDemo) error {
	KeyMap := make(map[string]struct{})
	keys := make([]string, 0)
	keys = append(keys, d.cache.Key(CacheDataTypeDemoByConditionPrefix))
	for _, v := range data {
		if v != nil {
			KeyMap[d.cache.Key(CacheDataTypeDemoByIDPrefix, v.ID)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByULidPrefix, v.ULid)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByBatchAPIPrefix, v.BatchAPI)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByCacheKeyPrefix, v.CacheKey)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByDataTypeBoolPrefix, v.DataTypeBool)] = struct{}{}
			KeyMap[d.cache.Key(CacheDataTypeDemoByDataTypeTimePrefix, v.DataTypeTime)] = struct{}{}
		}
	}
	for k := range KeyMap {
		keys = append(keys, k)
	}
	err := d.cache.DelBatch(ctx, keys)
	if err != nil {
		return err
	}
	return nil
}
