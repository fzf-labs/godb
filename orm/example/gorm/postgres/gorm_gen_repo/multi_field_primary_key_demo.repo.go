// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package gorm_gen_repo

import (
	"context"
	"errors"
	"reflect"
	"strings"

	"github.com/fzf-labs/godb/orm/condition"
	"github.com/fzf-labs/godb/orm/dbcache"
	"github.com/fzf-labs/godb/orm/encoding"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_dao"
	"github.com/fzf-labs/godb/orm/example/gorm/postgres/gorm_gen_model"
	"github.com/fzf-labs/godb/orm/gen/config"
	"github.com/jinzhu/copier"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var _ IMultiFieldPrimaryKeyDemoRepo = (*MultiFieldPrimaryKeyDemoRepo)(nil)

var (
	CacheMultiFieldPrimaryKeyDemoByConditionPrefix                      = "DBCache:gorm_gen:MultiFieldPrimaryKeyDemoByCondition"
	CacheMultiFieldPrimaryKeyDemoUnscopedByConditionPrefix              = "DBCache:gorm_gen:MultiFieldPrimaryKeyDemoUnscopedByCondition"
	CacheMultiFieldPrimaryKeyDemoByPrimaryKey1PrimaryKey2Prefix         = "DBCache:gorm_gen:MultiFieldPrimaryKeyDemoByPrimaryKey1PrimaryKey2"
	CacheMultiFieldPrimaryKeyDemoUnscopedByPrimaryKey1PrimaryKey2Prefix = "DBCache:gorm_gen:MultiFieldPrimaryKeyDemoUnscopedByPrimaryKey1PrimaryKey2"
)

type (
	IMultiFieldPrimaryKeyDemoRepo interface {
		// NewData 实例化
		NewData() *gorm_gen_model.MultiFieldPrimaryKeyDemo
		// DeepCopy 深拷贝
		DeepCopy(data *gorm_gen_model.MultiFieldPrimaryKeyDemo) *gorm_gen_model.MultiFieldPrimaryKeyDemo
		// CreateOne 创建一条数据
		CreateOne(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// CreateOneCache 创建一条数据, 并删除缓存
		CreateOneCache(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// CreateOneByTx 创建一条数据(事务)
		CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
		CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// CreateBatch 批量创建数据
		CreateBatch(ctx context.Context, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error
		// CreateBatchCache 批量创建数据, 并删除缓存
		CreateBatchCache(ctx context.Context, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error
		// CreateBatchByTx 批量创建数据(事务)
		CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error
		// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
		CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error
		// UpsertOne Upsert一条数据
		UpsertOne(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpsertOneCache Upsert一条数据, 并删除缓存
		UpsertOneCache(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpsertOneByTx Upsert一条数据(事务)
		UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpsertOneByFields 根据fields字段Upsert一条数据
		UpsertOneByFields(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error
		// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
		UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error
		// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
		UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error
		// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
		UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error
		// UpdateOne 更新一条数据
		UpdateOne(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscoped 更新一条数据（包括软删除）
		UpdateOneUnscoped(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneCache 更新一条数据，并删除缓存
		UpdateOneCache(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedCache 更新一条数据，并删除缓存（包括软删除）
		UpdateOneUnscopedCache(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneByTx 更新一条数据(事务)
		UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedByTx 更新一条数据(事务)（包括软删除）
		UpdateOneUnscopedByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
		UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedCacheByTx 更新一条数据(事务)，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedWithZero 更新一条数据,包含零值（包括软删除）
		UpdateOneUnscopedWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
		UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedCacheWithZero 更新一条数据,包含零值，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedWithZeroByTx 更新一条数据(事务),包含零值（包括软删除）
		UpdateOneUnscopedWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
		UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateOneUnscopedCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存（包括软删除）
		UpdateOneUnscopedCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error
		// UpdateBatchByPrimaryKey1PrimaryKey2 根据字段PrimaryKey1PrimaryKey2批量更新,零值会被更新
		UpdateBatchByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error
		// UpdateBatchUnscopedByPrimaryKey1PrimaryKey2 根据字段PrimaryKey1PrimaryKey2批量更新,零值会被更新（包括软删除）
		UpdateBatchUnscopedByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error
		// UpdateBatchByPrimaryKey1PrimaryKey2Tx 根据主键PrimaryKey1PrimaryKey2批量更新(事务),零值会被更新
		UpdateBatchByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error
		// UpdateBatchUnscopedByPrimaryKey1PrimaryKey2Tx 根据主键PrimaryKey1PrimaryKey2批量更新(事务),零值会被更新（包括软删除）
		UpdateBatchUnscopedByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error
		// FindOneByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据
		FindOneByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error)
		// FindOneUnscopedByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据（包括软删除）
		FindOneUnscopedByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error)
		// FindOneCacheByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据，并设置缓存
		FindOneCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error)
		// FindOneUnscopedCacheByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据（包括软删除），并设置缓存
		FindOneUnscopedCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error)
		// FindMultiByCondition 自定义查询数据(通用)
		FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error)
		// FindMultiUnscopedByCondition 自定义查询数据(通用)（包括软删除）
		FindMultiUnscopedByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error)
		// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
		FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error)
		// FindMultiUnscopedCacheByCondition 自定义查询数据(通用)（包括软删除）,并设置缓存
		FindMultiUnscopedCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error)
		// DeleteOneByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2删除一条数据
		DeleteOneByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error
		// DeleteOneUnscopedByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2删除一条数据
		DeleteOneUnscopedByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error
		// DeleteOneCacheByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2删除一条数据，并删除缓存
		DeleteOneCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error
		// DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2删除一条数据，并删除缓存
		DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error
		// DeleteOneByPrimaryKey1PrimaryKey2Tx 根据PrimaryKey1PrimaryKey2删除一条数据(事务)
		DeleteOneByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error
		// DeleteOneUnscopedByPrimaryKey1PrimaryKey2Tx 根据PrimaryKey1PrimaryKey2删除一条数据(事务)
		DeleteOneUnscopedByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error
		// DeleteOneCacheByPrimaryKey1PrimaryKey2Tx 根据PrimaryKey1PrimaryKey2删除一条数据，并删除缓存(事务)
		DeleteOneCacheByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error
		// DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2Tx 根据PrimaryKey1PrimaryKey2删除一条数据，并删除缓存(事务)
		DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error
		// DeleteIndexCache 删除索引存在的缓存
		DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.MultiFieldPrimaryKeyDemo) error
	}
	MultiFieldPrimaryKeyDemoRepo struct {
		db       *gorm.DB
		cache    dbcache.IDBCache
		encoding encoding.API
	}
)

func NewMultiFieldPrimaryKeyDemoRepo(cfg *config.Repo) *MultiFieldPrimaryKeyDemoRepo {
	return &MultiFieldPrimaryKeyDemoRepo{
		db:       cfg.DB,
		cache:    cfg.Cache,
		encoding: cfg.Encoding,
	}
}

// NewData 实例化
func (m *MultiFieldPrimaryKeyDemoRepo) NewData() *gorm_gen_model.MultiFieldPrimaryKeyDemo {
	return &gorm_gen_model.MultiFieldPrimaryKeyDemo{}
}

// DeepCopy 深拷贝
func (m *MultiFieldPrimaryKeyDemoRepo) DeepCopy(data *gorm_gen_model.MultiFieldPrimaryKeyDemo) *gorm_gen_model.MultiFieldPrimaryKeyDemo {
	newData := new(gorm_gen_model.MultiFieldPrimaryKeyDemo)
	_ = copier.CopyWithOption(newData, data, copier.Option{DeepCopy: true})
	return newData
}

// CreateOne 创建一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) CreateOne(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCache 创建一条数据, 并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) CreateOneCache(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneByTx 创建一条数据(事务)
func (m *MultiFieldPrimaryKeyDemoRepo) CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneCacheByTx 创建一条数据(事务), 并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) CreateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, data)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatch 批量创建数据
func (m *MultiFieldPrimaryKeyDemoRepo) CreateBatch(ctx context.Context, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCache 批量创建数据, 并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) CreateBatchCache(ctx context.Context, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchByTx 批量创建数据(事务)
func (m *MultiFieldPrimaryKeyDemoRepo) CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchCacheByTx 批量创建数据(事务), 并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) CreateBatchCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.MultiFieldPrimaryKeyDemo, batchSize int) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, data...)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOne Upsert一条数据
// Update all columns, except primary keys, to new value on conflict
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOne(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCache Upsert一条数据, 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneCache(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	oldData, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(data.PrimaryKey1), dao.PrimaryKey2.Eq(data.PrimaryKey2)).Unscoped().First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByTx Upsert一条数据(事务)
// Update all columns, except primary keys, to new value on conflict
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByTx Upsert一条数据(事务), 并删除缓存
// Update all columns, except primary keys, to new value on conflict
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	oldData, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(data.PrimaryKey1), dao.PrimaryKey2.Eq(data.PrimaryKey2)).Unscoped().First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	err = dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFields 根据fields字段Upsert一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneByFields(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFields 根据fields字段Upsert一条数据, 并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneCacheByFields(ctx context.Context, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.MultiFieldPrimaryKeyDemo{}
	err := m.db.Model(&gorm_gen_model.MultiFieldPrimaryKeyDemo{}).Clauses(whereExpressions...).Unscoped().First(oldData).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return err
	}
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFieldsTx 根据fields字段Upsert一条数据(事务)
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := tx.MultiFieldPrimaryKeyDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneCacheByFieldsTx 根据fields字段Upsert一条数据(事务), 并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) UpsertOneCacheByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.MultiFieldPrimaryKeyDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	fieldNameToValue := make(map[string]interface{})
	typ := reflect.TypeOf(data).Elem()
	val := reflect.ValueOf(data).Elem()
	for i := 0; i < typ.NumField(); i++ {
		field := typ.Field(i)
		gormTag := field.Tag.Get("gorm")
		if gormTag != "" {
			gormTags := strings.Split(gormTag, ";")
			for _, v := range gormTags {
				if strings.Contains(v, "column") {
					columnName := strings.TrimPrefix(v, "column:")
					fieldValue := val.Field(i).Interface()
					fieldNameToValue[columnName] = fieldValue
					break
				}
			}
		}
	}
	whereExpressions := make([]clause.Expression, 0)
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		whereExpressions = append(whereExpressions, clause.And(clause.Eq{Column: v, Value: fieldNameToValue[v]}))
		columns = append(columns, clause.Column{Name: v})
	}
	oldData := &gorm_gen_model.MultiFieldPrimaryKeyDemo{}
	err := m.db.Model(&gorm_gen_model.MultiFieldPrimaryKeyDemo{}).Clauses(whereExpressions...).Unscoped().First(oldData).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return err
	}
	dao := tx.MultiFieldPrimaryKeyDemo
	err = dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOne 更新一条数据
// data 中主键字段必须有值，零值不会被更新
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOne(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscoped 更新一条数据（包括软删除）
// data 中主键字段必须有值，零值不会被更新
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscoped(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCache 更新一条数据，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneCache(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCache 更新一条数据，并删除缓存（包括软删除）
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedCache(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneByTx 更新一条数据(事务)
// data 中主键字段必须有值，零值不会被更新
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedByTx 更新一条数据(事务)（包括软删除）
// data 中主键字段必须有值，零值不会被更新
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheByTx 更新一条数据(事务)，并删除缓存
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheByTx 更新一条数据(事务)，并删除缓存（包括软删除）
// data 中主键字段必须有值，零值不会被更新
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedCacheByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZero 更新一条数据,包含零值
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedWithZero 更新一条数据,包含零值（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZero 更新一条数据,包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneCacheWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheWithZero 更新一条数据,包含零值，并删除缓存（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedCacheWithZero(ctx context.Context, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZeroByTx 更新一条数据(事务),包含零值，
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedWithZeroByTx 更新一条数据(事务),包含零值（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneUnscopedCacheWithZeroByTx 更新一条数据(事务),包含零值，并删除缓存（包括软删除）
// data 中主键字段必须有值,并且会更新所有字段,包括零值
// oldData 旧数据，删除缓存时使用
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateOneUnscopedCacheWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, newData *gorm_gen_model.MultiFieldPrimaryKeyDemo, oldData *gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Select(dao.ALL.WithTable("")).Updates(newData)
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, oldData, newData)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByPrimaryKey1PrimaryKey2 根据字段PrimaryKey1PrimaryKey2批量更新,零值会被更新
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateBatchByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByPrimaryKey1PrimaryKey2 根据字段PrimaryKey1PrimaryKey2批量更新,零值会被更新（包括软删除）
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateBatchUnscopedByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchByPrimaryKey1PrimaryKey2Tx 根据字段PrimaryKey1PrimaryKey2批量更新(事务),零值会被更新
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateBatchByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateBatchUnscopedByPrimaryKey1PrimaryKey2Tx 根据字段PrimaryKey1PrimaryKey2批量更新(事务),零值会被更新（包括软删除）
func (m *MultiFieldPrimaryKeyDemoRepo) UpdateBatchUnscopedByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string, data map[string]interface{}) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Updates(data)
	if err != nil {
		return err
	}
	return nil
}

// FindOneByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) FindOneByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	result, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneUnscopedByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据（包括软删除）
func (m *MultiFieldPrimaryKeyDemoRepo) FindOneUnscopedByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindOneCacheByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据，并设置缓存
func (m *MultiFieldPrimaryKeyDemoRepo) FindOneCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	resp := new(gorm_gen_model.MultiFieldPrimaryKeyDemo)
	cacheKey := m.cache.Key(CacheMultiFieldPrimaryKeyDemoByPrimaryKey1PrimaryKey2Prefix, primaryKey1, primaryKey2)
	cacheValue, err := m.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
		result, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := m.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, m.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = m.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneUnscopedCacheByPrimaryKey1PrimaryKey2 根据PrimaryKey1PrimaryKey2查询一条数据（包括软删除），并设置缓存
func (m *MultiFieldPrimaryKeyDemoRepo) FindOneUnscopedCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) (*gorm_gen_model.MultiFieldPrimaryKeyDemo, error) {
	resp := new(gorm_gen_model.MultiFieldPrimaryKeyDemo)
	cacheKey := m.cache.Key(CacheMultiFieldPrimaryKeyDemoUnscopedByPrimaryKey1PrimaryKey2Prefix, primaryKey1, primaryKey2)
	cacheValue, err := m.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
		result, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := m.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, m.cache.TTL())
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = m.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByCondition 自定义查询数据(通用)
func (m *MultiFieldPrimaryKeyDemoRepo) FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.MultiFieldPrimaryKeyDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = m.db.WithContext(ctx).Model(&gorm_gen_model.MultiFieldPrimaryKeyDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := m.db.WithContext(ctx).Model(&gorm_gen_model.MultiFieldPrimaryKeyDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiUnscopedByCondition 自定义查询数据(通用)（包括软删除）
func (m *MultiFieldPrimaryKeyDemoRepo) FindMultiUnscopedByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, 0)
	conditionReply := &condition.Reply{}
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.MultiFieldPrimaryKeyDemo{})
	if err != nil {
		return result, conditionReply, err
	}
	err = m.db.WithContext(ctx).Model(&gorm_gen_model.MultiFieldPrimaryKeyDemo{}).Unscoped().Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, conditionReply, err
	}
	if total == 0 {
		return result, conditionReply, nil
	}
	conditionReply, err = conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, conditionReply, err
	}
	query := m.db.WithContext(ctx).Model(&gorm_gen_model.MultiFieldPrimaryKeyDemo{}).Unscoped().Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, conditionReply, err
	}
	return result, conditionReply, err
}

// FindMultiCacheByCondition 自定义查询数据(通用),并设置缓存
func (m *MultiFieldPrimaryKeyDemoRepo) FindMultiCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.MultiFieldPrimaryKeyDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := m.cache.Key(CacheMultiFieldPrimaryKeyDemoByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := m.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := m.FindMultiByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := m.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, m.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = m.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// FindMultiUnscopedCacheByCondition 自定义查询数据(通用)（包括软删除）,并设置缓存
func (m *MultiFieldPrimaryKeyDemoRepo) FindMultiUnscopedCacheByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, *condition.Reply, error) {
	type Tmp struct {
		Result         []*gorm_gen_model.MultiFieldPrimaryKeyDemo
		ConditionReply *condition.Reply
	}
	tmp := Tmp{
		Result:         make([]*gorm_gen_model.MultiFieldPrimaryKeyDemo, 0),
		ConditionReply: &condition.Reply{},
	}
	cacheKey := m.cache.Key(CacheMultiFieldPrimaryKeyDemoUnscopedByConditionPrefix)
	cacheField := conditionReq.ConvertToCacheField()
	cacheValue, err := m.cache.FetchHash(ctx, cacheKey, cacheField, func() (string, error) {
		result, conditionReply, err := m.FindMultiUnscopedByCondition(ctx, conditionReq)
		if err != nil {
			return "", err
		}
		tmp.Result = result
		tmp.ConditionReply = conditionReply
		marshal, err := m.encoding.Marshal(tmp)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	}, m.cache.TTL())
	if err != nil {
		return tmp.Result, tmp.ConditionReply, err
	}
	if cacheValue != "" {
		err = m.encoding.Unmarshal([]byte(cacheValue), &tmp)
		if err != nil {
			return tmp.Result, tmp.ConditionReply, err
		}
	}
	return tmp.Result, tmp.ConditionReply, nil
}

// DeleteOneByPrimaryKey1PrimaryKey2 根据primaryKey1删除一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByPrimaryKey1PrimaryKey2 根据primaryKey1删除一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneUnscopedByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByPrimaryKey1PrimaryKey2 根据primaryKey1删除一条数据，并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	result, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2 根据primaryKey1删除一条数据，并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2(ctx context.Context, primaryKey1 string, primaryKey2 string) error {
	dao := gorm_gen_dao.Use(m.db).MultiFieldPrimaryKeyDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByPrimaryKey1PrimaryKey2Tx 根据primaryKey1删除一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedByPrimaryKey1PrimaryKey2Tx 根据primaryKey1删除一条数据
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneUnscopedByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	_, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByPrimaryKey1PrimaryKey2Tx 根据primaryKey1删除一条数据，并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneCacheByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	result, err := dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2Tx 根据primaryKey1删除一条数据，并删除缓存
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteOneUnscopedCacheByPrimaryKey1PrimaryKey2Tx(ctx context.Context, tx *gorm_gen_dao.Query, primaryKey1 string, primaryKey2 string) error {
	dao := tx.MultiFieldPrimaryKeyDemo
	result, err := dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Unscoped().Where(dao.PrimaryKey1.Eq(primaryKey1), dao.PrimaryKey2.Eq(primaryKey2)).Delete()
	if err != nil {
		return err
	}
	err = m.DeleteIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteUniqueIndexCache 删除索引存在的缓存
func (m *MultiFieldPrimaryKeyDemoRepo) DeleteIndexCache(ctx context.Context, data ...*gorm_gen_model.MultiFieldPrimaryKeyDemo) error {
	KeyMap := make(map[string]struct{})
	keys := make([]string, 0)
	keys = append(keys, m.cache.Key(CacheMultiFieldPrimaryKeyDemoByConditionPrefix))
	for _, v := range data {
		if v != nil {
			KeyMap[m.cache.Key(CacheMultiFieldPrimaryKeyDemoByPrimaryKey1PrimaryKey2Prefix, v.PrimaryKey1, v.PrimaryKey2)] = struct{}{}
		}
	}
	for k := range KeyMap {
		keys = append(keys, k)
	}
	err := m.cache.DelBatch(ctx, keys)
	if err != nil {
		return err
	}
	return nil
}
